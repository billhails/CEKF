#
# CEKF - VM supporting amb
# Copyright (C) 2022-2023  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

config:
    name: ast
    limited_includes:
    - bigint.h
    - file_id.h

description: Abstract Syntax Tree structures generated by the parser.

structs:
    AstNest:
        definitions: AstDefinitions
        expressions: AstExpressions

    AstNameSpaceImpl:
        id: file_id
        definitions: AstDefinitions

    AstNameSpace:
        symbol: HashSymbol
        reference: index # index into a table of namespace implementations

    AstDefinitions:
        definition: AstDefinition
        next: AstDefinitions

    AstDefine:
        symbol: HashSymbol
        expression: AstExpression

    AstTypeDef:
        userType: AstUserType
        typeBody: AstTypeBody

    AstUserType:
        symbol: HashSymbol
        typeSymbols: AstTypeSymbols

    AstTypeSymbols:
        typeSymbol: HashSymbol
        next: AstTypeSymbols

    AstTypeBody:
        typeConstructor: AstTypeConstructor
        next: AstTypeBody

    AstTypeConstructor:
        symbol: HashSymbol
        typeList: AstTypeList

    AstTypeFunction:
        symbol: HashSymbol
        typeList: AstTypeList

    AstTypeList:
        type: AstType
        next: AstTypeList

    AstType:
        typeClause: AstTypeClause
        next: AstType

    AstCompositeFunction:
        function: AstFunction
        next: AstCompositeFunction

    AstFunction:
        argList: AstArgList
        nest: AstNest

    AstArgList:
        arg: AstArg
        next: AstArgList

    AstAltArgs: # temp struct used by the parser for `fn (...) | (...) { ... }` alternative arguments
        argList: AstArgList
        next: AstAltArgs

    AstAltFunction: # ditto
        altArgs: AstAltArgs
        nest: AstNest

    AstUnpack:
        symbol: HashSymbol
        argList: AstArgList

    AstNamedArg:
        name: HashSymbol
        arg: AstArg

    AstFunCall:
        function: AstExpression
        arguments: AstExpressions

    AstExpressions:
        expression: AstExpression
        next: AstExpressions

    AstIff:
        test: AstExpression
        consequent: AstNest
        alternative: AstNest

    AstPrint:
        exp: AstExpression

unions:
    AstDefinition:
        define: AstDefine
        typeDef: AstTypeDef
        nameSpace: AstNameSpace

    AstTypeClause:
        integer: void_ptr
        character: void_ptr
        var: HashSymbol
        typeFunction: AstTypeFunction
        typeTuple: AstTypeList

    AstArg:
        wildcard: void_ptr
        symbol: HashSymbol
        named: AstNamedArg
        unpack: AstUnpack
        number: MaybeBigInt
        character: char
        tuple: AstArgList

    AstExpression:
        back: void_ptr
        funCall: AstFunCall
        symbol: HashSymbol
        number: MaybeBigInt
        character: char
        fun: AstCompositeFunction
        nest: AstNest
        iff: AstIff
        print: AstPrint
        tuple: AstExpressions

arrays:
    AstCharArray:
        dimension: 1
        entries: char

    AstNameSpaceArray:
        dimension: 1
        entries: AstNameSpaceImpl

    AstFileIdArray:
        dimension: 1
        entries: file_id

primitives: !include primitives.yaml

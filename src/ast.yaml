#
# CEKF - VM supporting amb
# Copyright (C) 2022-2023  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

config:
    name: ast

structs:
    AstNest:
        definitions: AstDefinitions
        expressions: AstExpressions

    AstDefinitions:
        definition: AstDefinition
        next: AstDefinitions

    AstDefine:
        symbol: HashSymbol
        expression: AstExpression

    AstPrototype:
        symbol: HashSymbol
        body: AstPrototypeBody

    AstPrototypeBody:
        single: AstSinglePrototype
        next: AstPrototypeBody

    AstPrototypeSymbolType:
        symbol: HashSymbol
        type: AstType

    AstLoad:
        package: AstPackage
        symbol: HashSymbol

    AstTypeDef:
        flatType: AstFlatType
        typeBody: AstTypeBody

    AstFlatType:
        symbol: HashSymbol
        typeSymbols: AstTypeSymbols

    AstTypeSymbols:
        typeSymbol: HashSymbol
        next: AstTypeSymbols

    AstTypeBody:
        typeConstructor: AstTypeConstructor
        next: AstTypeBody

    AstTypeConstructor:
        symbol: HashSymbol
        typeList: AstTypeList

    AstTypeList:
        type: AstType
        next: AstTypeList

    AstType:
        typeClause: AstTypeClause
        next: AstType

    AstConditional:
        expression: AstExpression
        consequent: AstNest
        alternative: AstNest

    AstCompositeFunction:
        function: AstFunction
        next: AstCompositeFunction

    AstFunction:
        argList: AstArgList
        nest: AstNest

    AstArgList:
        arg: AstArg
        next: AstArgList

    AstUnpack:
        symbol: HashSymbol
        argList: AstArgList

    AstArgPair:
        car: AstArg
        cdr: AstArg

    AstNamedArg:
        name: HashSymbol
        arg: AstArg

    AstEnvType:
        name: HashSymbol
        prototype: HashSymbol

    AstFunCall:
        function: AstExpression
        arguments: AstExpressions

    AstPackage:
        symbol: HashSymbol
        next: AstPackage

    AstExpressions:
        expression: AstExpression
        next: AstExpressions

    AstEnv:
        package: AstPackage
        definitions: AstDefinitions

    AstString:
        string: char_ptr

unions:
    AstDefinition:
        define: AstDefine
        prototype: AstPrototype
        load: AstLoad
        typeDef: AstTypeDef

    AstSinglePrototype:
        symbolType: AstPrototypeSymbolType
        prototype: AstPrototype
    
    AstTypeClause:
        integer: void_ptr
        character: void_ptr
        boolean: void_ptr
        string: void_ptr
        list: AstType
        type: AstType
        var: HashSymbol
        typeConstructor: AstTypeConstructor

    AstArg:
        wildcard: void_ptr
        symbol: HashSymbol
        named: AstNamedArg
        env: AstEnvType
        unpack: AstUnpack
        number: int
        string: AstString
        character: char
        "yes": void_ptr
        "no": void_ptr

    AstExpression:
        nil: void_ptr
        back: void_ptr
        funCall: AstFunCall
        symbol: HashSymbol
        number: int
        string: AstString
        character: char
        "yes": void_ptr
        "no": void_ptr
        fun: AstCompositeFunction
        env: AstEnv
        conditional: AstConditional
        nest: AstNest

enums: {}

primitives:
    HashSymbol:
        cname: "HashSymbol *"
        printFn: "printAstSymbol"
        valued: true
    char:
        cname: "char"
        printf: "%c"
        valued: true
    char_ptr:
        cname: "char *"
        printf: "%s"
        valued: true
    void_ptr:
        cname: "void *"
        printf: "%p"
        valued: false
    bool:
        cname: "bool"
        printf: "%d"
        valued: true
    int:
        cname: "int"
        printf: "%d"
        valued: true
    hash_t:
        cname: "hash_t"
        printf: "%x"
        valued: true

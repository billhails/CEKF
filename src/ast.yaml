#
# CEKF - VM supporting amb
# Copyright (C) 2022-2024  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

config:
    name: ast
    description: >-
        Abstract Syntax Tree (AST) structures generated by the parser.
        As this is close to the surface of the language, it is quite
        complicated. The complexity is reduced downstream by conversion
        to simple lambda form.
    parserInfo: true
    limited_includes:
    - bigint.h
    - file_id.h


structs:
    AstProg:
        meta:
            brief: AST Program
            description: >-
                The root structure of the AST, containing the
                program's definitions, namespaces and expressions.
        data:
            preamble: AstDefinitions
            namespaces: AstNamespaceArray
            body: AstExpressions

    AstNest:
        meta:
            brief: AST Nest
            description: >-
                A nested structure in the AST, used for grouping
                expressions. Contains a list of definitions and
                a list of expressions.
        data:
            definitions: AstDefinitions
            expressions: AstExpressions

    AstNamespaceImpl:
        meta:
            brief: AST Namespace Implementation
            description: >-
                An implementation of a namespace in the AST,
                containing its unique file ID and definitions.
        data:
            id: file_id
            definitions: AstDefinitions

    AstNamespace:
        meta:
            brief: AST Namespace
            description: >-
                A flyweight reference to namespace in the AST,
                containing its index into an array of namespace
                implementations.
        data:
            symbol: HashSymbol
            reference: index

    AstDefinitions:
        meta:
            brief: AST Definitions
            description: >-
                A list of definitions in the AST, which can include
                function definitions, type definitions, and aliases.
        data:
            definition: AstDefinition
            next: AstDefinitions

    AstDefine:
        meta:
            brief: AST Definition
            description: >-
                A definition in the AST, which can be a function,
                type, alias, or macro.
        data:
            symbol: HashSymbol
            expression: AstExpression

    AstAlias:
        meta:
            brief: AST Alias
            description: >-
                A type alias in the AST, which is a reference
                to another type.
        data:
            name: HashSymbol
            type: AstType

    AstExprAlias:
        meta:
            brief: AST Expression Alias
            description: >-
                An alias for an expression in the arguments to a
                function AST, which can be used to refer to an entire
                expression while still matching the expression.
        data:
            name: HashSymbol
            value: AstExpression

    AstDefMacro:
        meta:
            brief: AST Macro Definition
            description: >-
                A macro definition in the AST, used to define
                lazy functions.
        data:
            name: HashSymbol
            definition: AstAltFunction

    AstTypeDef:
        meta:
            brief: AST Type Definition
            description: >-
                A type definition in the AST, which has
                a type signature and a body.
                Example:
                `<<typedef list(#t) { cons(#t, list(#t)) | nil }>>`
        data:
            typeSig: AstTypeSig
            typeBody: AstTypeBody

    AstTypeSig:
        meta:
            brief: AST Type Signature
            description: >-
                The signature of a user-defined type in the AST,
                which has a name and optional type variables.
                Example:
                `typedef <<list(#t)>> { cons(#t, list(#t)) | nil }`
        data:
            symbol: HashSymbol
            typeSymbols: AstTypeSymbols

    AstTypeSymbols:
        meta:
            brief: AST Type Symbols
            description: >-
                A list of type symbols used as arguments to a
                type sigature in the AST.
                Example:
                `typedef list(<<#t>>) { cons(#t, list(#t)) | nil }`
        data:
            typeSymbol: HashSymbol
            next: AstTypeSymbols

    AstTypeBody:
        meta:
            brief: AST Type Body
            description: >-
                The body of a user-defined type in the AST,
                which is a list of alternative type constructors.
                Example:
                `typedef list(#t) <<{ cons(#t, list(#t)) | nil }>>`
        data:
            typeConstructor: AstTypeConstructor
            next: AstTypeBody

    AstTypeConstructor:
        meta:
            brief: AST Type Constructor
            description: >-
                An individual type constructor in the body
                of a type definition.
                Example:
                `typedef list(#t) { <<cons(#t, list(#t))>> | <<nil>> }`
        data:
            symbol: HashSymbol
            args: AstTypeConstructorArgs

    AstTypeFunction:
        meta:
            brief: AST Type Function
            description: >-
                A call to a type function used in the arguments to a type
                constructor.
                Example:
                `typedef list(#t) { cons(#t, <<list(#t)>>) | nil }`
        data:
            symbol: AstLookupOrSymbol
            typeList: AstTypeList

    AstTypeList:
        meta:
            brief: AST Type List
            description: >-
                A list of types used as argument to type functions
                or type constructors, or as the body of a tuple.
                Examples:
                `typedef list(#t) { cons(<<#t, list(<<#t>>)>>) | nil }`
        data:
            type: AstType
            next: AstTypeList

    AstTypeMap:
        meta:
            brief: AST Type Map
            description: >-
                An alternative to a type list, a map of types
                which can be used for type functions or type constructors.
                Example:
                `typedef named_struct(#t) {
                    named<<{name: list(char), value: list(#t)}>> | oopsie
                }`
        data:
            key: HashSymbol
            type: AstType
            next: AstTypeMap

    AstType:
        meta:
            brief: AST Type
            description: >-
                A list of AST Type Clauses.
                Example:
                `typedef list(#t) { cons<<(#t, list(#t))>> | nil }`
        data:
            typeClause: AstTypeClause
            next: AstType

    AstCompositeFunction:
        meta:
            brief: AST Composite Function
            description: >-
                A composite function in the AST, which can be a normal
                function or a macro. Consists of a name and one or more
                alternative function bodies.
        data:
            unsafe: bool = false
            function: AstFunction
            next: AstCompositeFunction

    AstFunction:
        meta:
            brief: AST Function
            description: >-
                An individual function in the definition of a composite
                function. Contains a list of arguments and a body.
        data:
            argList: AstFargList
            nest: AstNest

    AstFargList:
        meta:
            brief: AST Formal Argument List
            description: >-
                A list of formal arguments in a function definition.
        data:
            arg: AstFarg
            next: AstFargList

    AstTaggedArgList:
        meta:
            brief: AST Tagged Argument List
            description: >-
                A list of arguments in a struct, where each
                argument is tagged with a name.
        data:
            tag: HashSymbol
            arg: AstFarg
            next: AstTaggedArgList

    AstAltArgs:
        meta:
            brief: AST Alternative Function Arguments
            description: >-
                A list of alternative arguments for a function in the AST.
                Used to represent multiple argument patterns with a single
                function body.
        data:
            argList: AstFargList
            next: AstAltArgs

    AstAltFunction:
        meta:
            brief: AST Alternative Function
            description: >-
                A single function with multiple alternative argument
                patterns.
        data:
            altArgs: AstAltArgs
            nest: AstNest

    AstUnpack:
        meta:
            brief: AST Unpack
            description: >-
                An unpack operation in the AST, which is used to unpack
                a tuple or a list into individual arguments.
        data:
            symbol: AstLookupOrSymbol
            argList: AstFargList

    AstUnpackStruct:
        meta:
            brief: AST Unpack Struct
            description: >-
                An unpack operation for a struct in the AST, which unpacks
                the named fields of a struct into individual arguments.
        data:
            symbol: AstLookupOrSymbol
            argList: AstTaggedArgList

    AstNamedArg:
        meta:
            brief: AST Named Argument
            description: >-
                A named argument in a function definition, which allows
                a complex argument to be both treated as a whole and
                destructured into its components.
        data:
            name: HashSymbol
            arg: AstFarg

    AstFunCall:
        meta:
            brief: AST Function Call
            description: >-
                A function call in the AST, which can be a call to a
                normal function or a macro. Contains the function being
                called and its arguments.
        data:
            function: AstExpression
            arguments: AstExpressions

    AstExpressions:
        meta:
            brief: AST Expressions
            description: >-
                A list of expressions in the AST, which can include
                function calls, literals, and other expressions.
                Used as the actual arguments in a function call.
        data:
            expression: AstExpression
            next: AstExpressions

    AstLookupSymbol:
        meta:
            brief: AST Lookup Symbol
            description: >-
                A symbol that is looked up in the AST, which can be a
                variable or a function. Used to refer to variables or
                functions defined in other namespaces.
        data:
            nsid: int
            nsSymbol: HashSymbol
            symbol: HashSymbol

    AstLookup:
        meta:
            brief: AST Lookup
            description: >-
                A lookup operation in the AST, which evaluates an expression
                in another namespace.
        data:
            nsid: int
            nsSymbol: HashSymbol
            expression: AstExpression

    AstIff:
        meta:
            brief: AST If Expression
            description: >-
                An if expression in the AST, comprising a test expression
                and consequent and alternative branches.
        data:
            test: AstExpression
            consequent: AstNest
            alternative: AstNest

    AstPrint:
        meta:
            brief: AST Print Expression
            description: >-
                A print expression in the AST, which outputs a value to
                the console or standard output.
        data:
            exp: AstExpression

    AstTypeof:
        meta:
            brief: AST Typeof Expression
            description: >-
                A typeof expression in the AST, which returns a string
                representation of the type of an expression.
        data:
            exp: AstExpression

    AstStruct:
        meta:
            brief: AST Struct
            description: >-
                A structure in the AST with named fields, when used
                as an actual argument to a function.
        data:
            symbol: AstLookupOrSymbol
            expressions: AstTaggedExpressions

    AstTaggedExpressions:
        meta:
            brief: AST Tagged Expressions
            description: >-
                THe internal named components of an AstStruct, when
                used as an actual argument to a function.
        data:
            tag: HashSymbol
            expression: AstExpression
            next: AstTaggedExpressions

enums:
    AstPosition:
        meta:
            brief: AST Position
            description: >-
                The fixity of a user-defined operator.
        data:
            - PREFIX
            - INFIX
            - POSTFIX

unions:
    AstTypeConstructorArgs:
        meta:
            brief: AST Type Constructor Arguments
            description: >-
                The arguments to a type constructor in the AST.
                Can be a list of types or a map of types.
        data:
            list: AstTypeList
            map: AstTypeMap

    AstLookupOrSymbol:
        meta:
            brief: AST Lookup or Symbol
            description: >-
                A reference to a symbol in the AST, which can be a
                direct symbol or a lookup in another namespace.
        data:
            symbol: HashSymbol
            lookup: AstLookupSymbol

    AstDefinition:
        meta:
            brief: AST Definition
            description: >-
                A definition in the AST, which can be a function,
                type definition, alias, or macro.
        data:
            define: AstDefine
            typeDef: AstTypeDef
            macro: AstDefMacro
            alias: AstAlias
            blank: void_ptr

    AstTypeClause:
        meta:
            brief: AST Type Clause
            description: >-
                A single argument to a type constructor or type function.
                Example:
                `typedef list(#t) { cons(<<#t>>, <<list(<<#t>>)>>) | nil }`
        data:
            integer: void_ptr
            character: void_ptr
            var: HashSymbol
            typeFunction: AstTypeFunction
            typeTuple: AstTypeList

    AstFarg:
        meta:
            brief: AST Formal Argument
            description: >-
                A formal argument in a function definition, which can be a
                variable, a wildcard, or a destructured argument.
        data:
            wildcard: void_ptr
            symbol: HashSymbol
            lookup: AstLookupSymbol
            named: AstNamedArg
            unpack: AstUnpack
            unpackStruct: AstUnpackStruct
            number: MaybeBigInt
            character: character
            tuple: AstFargList

    AstExpression:
        meta:
            brief: AST Expression
            description: >-
                Any expression in the AST.
        data:
            back: void_ptr
            wildcard: void_ptr
            alias: AstExprAlias
            funCall: AstFunCall
            lookup: AstLookup
            symbol: HashSymbol
            number: MaybeBigInt
            character: character
            fun: AstCompositeFunction
            nest: AstNest
            iff: AstIff
            print: AstPrint
            typeOf: AstTypeof
            tuple: AstExpressions
            env: void_ptr
            structure: AstStruct
            assertion: AstExpression
            error: AstExpression

hashes:
    AstIntTable:
        meta:
            brief: AST Integer Table
            description: >-
                A hash table mapping symbols to integers.
        data:
            entries: int

arrays:
    AstNamespaceArray:
        meta:
            brief: AST Namespace Array
            description: >-
                An array of namespace implementations in the AST.
                Used to store the namespaces defined in the program.
        data:
            entries: AstNamespaceImpl

    AstFileIdArray:
        meta:
            brief: AST File ID Array
            description: >-
                An array of file IDs used in the AST, which identify
                namespace files that have already been read.
        data:
            entries: file_id

    AstStringArray:
        meta:
            brief: AST String Array
            description: >-
                A simple array of strings.
        data:
            entries: string

primitives: !include primitives.yaml

#
# CEKF - VM supporting amb
# Copyright (C) 2022-2024  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

config:
    name: tc
    description: Structures to support type inference


cmp:
    extraArgs:
        map: HashTable
    bespokeImplementation:
    - TcVar

structs:
    TcEnv:
        meta:
            brief: Type-checker Environment
            description: >-
                The environment contains a table of types, a table of type signatures,
                and a reference to the next environment in the chain.
        data:
            table: TcTypeTable
            typeSigs: TcTypeSigTable
            next: TcEnv

    TcNg:
        meta:
            brief: Non-generic variables
            description: >-
                Variables bound as function arguments while in the body of
                a function definition. These are not generic variables.
        data:
            table: TcTypeTable
            next: TcNg

    TcFunction:
        meta:
            brief: Function type
            description: >-
                Represents a function type `a -> b` with an argument type,
                a result type, and a laziness flag indicating if the argument
                should be thunked (wrapped in a zero-argument lambda).
        data:
            arg: TcType
            result: TcType
            isLazy: bool=false

    TcPair:
        meta:
            brief: Pair type
            description: >-
                Represents a pair of types, used for tuples and other
                pair-like structures.
        data:
            first: TcType
            second: TcType

    TcThunk:
        meta:
            brief: Thunk type
            description: >-
                Represents a thunk (delayed computation) type `thunk(a)`, which
                is equivalent to `() -> a`. Used for lazy evaluation where
                computation is deferred until explicitly forced. Displays as
                `(#() => a)` in type signatures.
        data:
            type: TcType

    TcTypeSig:
        meta:
            brief: Type signature
            description: >-
                Represents a type signature with a name, arguments,
                and a namespace.  It is used to define types in the
                type-checker.
        data:
            name: HashSymbol
            args: TcTypeSigArgs
            ns: int

    TcTypeSigArgs:
        meta:
            brief: Type signature arguments
            description: >-
                Represents the arguments of a type signature, which can be
                any length.
        data:
            type: TcType
            next: TcTypeSigArgs

    TcVar:
        meta:
            brief: Type variable
            description: >-
                Represents a type variable, which can be used in type signatures
                and type inference. It has a name, an ID, and an optional instance
                if it is bound to a type.
        data:
            name: HashSymbol
            id: int
            instance: TcType=NULL

hashes:
    TcTypeTable:
        meta:
            brief: Type table
            description: >-
                A hash table mapping type names to their definitions.
        data:
            entries: TcType

    TcTypeSigTable:
        meta:
            brief: Type signature table
            description: >-
                A hash table mapping type signature names to their definitions.
        data:
            entries: TcTypeSig

arrays:
    TcTypeArray:
        meta:
            brief: Array of types
            description: >-
                An array of types used in type signatures and type inference.
        data:
            entries: TcType

    TcNamespaceArray:
        meta:
            brief: Array of namespaces
            description: >-
                An array of namespaces used in type inference.
        data:
            entries: TcType

unions:
    TcType:
        meta:
            brief: Type union
            description: >-
                Represents a type in the type-checker, which can be a function,
                pair, thunk, variable, small integer, big integer, character, unknown,
                opaque type, type signature, tuple, or an array of namespaces.
        data:
            function: TcFunction
            pair: TcPair
            thunk: TcThunk
            var: TcVar
            smallinteger: void_ptr
            biginteger: void_ptr
            character: void_ptr
            unknown: HashSymbol
            opaque: HashSymbol
            typeSig: TcTypeSig
            tuple: TcTypeArray
            namespaces: TcNamespaceArray
            env: TcEnv
            nsid: int

primitives: !include primitives.yaml

#
# CEKF - VM supporting amb
# Copyright (C) 2022-2024  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# common primitive types not defined by the schemas

HashSymbol:
    data:
        cname: "struct HashSymbol *"
        printFn: printAstSymbol
        valued: true

int:
    data:
        cname: Integer
        printf: "%d"
        valued: true

control:
    data:
        cname: Control
        printf: "%08lux"
        valued: true

index:
    data:
        cname: Index
        printf: "%u"
        valued: true

byte:
    data:
        cname: Byte
        printf: "%02ux"
        valued: true

file_id:
    data:
        cname: "struct AgnosticFileId *"
        printFn: printAgnosticFileId
        compareFn: cmpAgnosticFileId
        markFn: markAgnosticFileId
        valued: true

opaque:
    data:
        cname: "struct Opaque *"
        printFn: printOpaque
        markFn: markOpaque
        valued: true

void_ptr:
    data:
        cname: "void *"
        printf: "%p"
        valued: false

bool:
    data:
        cname: "bool"
        printf: "%d"
        valued: true

character:
    data:
        cname: Character
        printf: "%lc"
        valued: true

uchar:
    data:
        cname: unsigned char
        printf: "%c"
        valued: true

schar:
    data:
        cname: char
        printf: "%c"
        valued: true

BigInt:
    data:
        cname: "struct BigInt *"
        printFn: "printBigInt"
        markFn: "markBigInt"
        compareFn: "cmpBigInt"
        valued: true

MaybeBigInt:
    data:
        cname: "struct MaybeBigInt *"
        printFn: "printMaybeBigInt"
        markFn: "markMaybeBigInt"
        compareFn: "cmpMaybeBigInt"
        valued: true

string:
    data:
        cname: "char *"
        printf: "%s"
        valued: true

ustring:
    data:
        cname: "unsigned char *"
        printf: "%s"
        valued: true

PrattOp:
    data:
        cname: PrattOp
        printf: "%p"
        valued: true

double:
    data:
        cname: Double
        printf: "%f"
        valued: true

file:
    data:
        cname: "FILE *"
        printf: "%p"
        valued: true

size:
    data:
        cname: size_t
        printf: "%zu"
        valued: true

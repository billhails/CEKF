#
# CEKF - VM supporting amb
# Copyright (C) 2022-2023  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

config:
    name: lambda

description: Plain lambda structures generated by lambda conversion.

structs:
    LamLam:
        nargs: int
        args: LamVarList
        exp: LamExp

    LamVarList:
        var: HashSymbol
        next: LamVarList

    LamPrimApp:
        type: LamPrimOp
        exp1: LamExp
        exp2: LamExp

    LamUnaryApp:
        type: LamUnaryOp
        exp: LamExp

    LamSequence:
        exp: LamExp
        next: LamSequence

    LamList:
        exp: LamExp
        next: LamList

    LamApply:
        function: LamExp
        nargs: int
        args: LamList

    LamMakeVec:
        nargs: int
        args: LamList

    LamIff:
        condition: LamExp
        consequent: LamExp
        alternative: LamExp

    LamCond:
        value: LamExp
        cases: LamCondCases

    LamCondCases:
        constant: LamExp
        body: LamExp
        next: LamCondCases

    LamMatch:
        index: LamExp
        cases: LamMatchList

    LamMatchList:
        matches: LamIntList
        body: LamExp
        next: LamMatchList

    LamIntList:
        item: int
        next: LamIntList

    LamLet:
        var: HashSymbol
        value: LamExp
        body: LamExp

    LamLetRec:
        nbindings: int
        bindings: LamLetRecBindings
        body: LamExp

    LamLetRecBindings:
        var: HashSymbol
        val: LamExp
        next: LamLetRecBindings

    LamContext:
        frame: HashTable
        parent: LamContext

    LamAnd:
        left: LamExp
        right: LamExp

    LamOr:
        left: LamExp
        right: LamExp

    LamAmb:
        left: LamExp
        right: LamExp

    LamTypeConstructorInfo:
        vec: bool # does this need to be a vector?
        arity: int # number of arguments to this constructor
        size: int # number of alternatives
        index: int # index into list of alternatives

enums:
    LamPrimOp:
        - LAM_PRIM_ADD
        - LAM_PRIM_SUB
        - LAM_PRIM_MUL
        - LAM_PRIM_DIV
        - LAM_PRIM_MOD
        - LAM_PRIM_POW
        - LAM_PRIM_EQ
        - LAM_PRIM_NE
        - LAM_PRIM_GT
        - LAM_PRIM_LT
        - LAM_PRIM_GE
        - LAM_PRIM_LE
        - LAM_PRIM_VEC
        - LAM_PRIM_XOR

    LamUnaryOp:
        - LAM_UNARY_NEG
        - LAM_UNARY_NOT
        - LAM_UNARY_PRINT

unions:
    LamExp:
        lam: LamLam
        var: HashSymbol
        integer: int
        prim: LamPrimApp
        unary: LamUnaryApp
        list: LamSequence
        makeVec: LamMakeVec
        apply: LamApply
        iff: LamIff
        callcc: LamExp
        letrec: LamLetRec
        let: LamLet
        match: LamMatch
        cond: LamCond
        and: LamAnd
        or: LamOr
        amb: LamAmb
        character: character
        back: void_ptr
        error: void_ptr
        cond_default: void_ptr

primitives:
    HashSymbol:
        cname: "HashSymbol *"
        printFn: "printLambdaSymbol"
        markFn: "markHashSymbol"
        valued: true
    HashTable:
        cname: "HashTable *"
        printFn: "printHashTable"
        markFn: "markHashTable"
        valued: true
    void_ptr:
        cname: "void *"
        printf: "%p"
        valued: false
    int:
        cname: "int"
        printf: "%d"
        valued: true
    bool:
        cname: "bool"
        printf: "%d"
        valued: true
    character:
        cname: "char"
        printf: "%c"
        valued: true

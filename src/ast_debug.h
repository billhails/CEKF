#ifndef cekf_ast_debug_h
#define cekf_ast_debug_h
/*
 * CEKF - VM supporting amb
 * Copyright (C) 2022-2023  Bill Hails
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Abstract Syntax Tree structures generated by the parser.
 *
 * Generated from src/ast.yaml by tools/makeAST.py
 */

#include "ast_helper.h"
#include "bigint.h"

/*
 * print declarations
 */

void printAstNest(struct AstNest * x, int depth);
void printAstDefinitions(struct AstDefinitions * x, int depth);
void printAstDefine(struct AstDefine * x, int depth);
void printAstPrototype(struct AstPrototype * x, int depth);
void printAstPrototypeBody(struct AstPrototypeBody * x, int depth);
void printAstPrototypeSymbolType(struct AstPrototypeSymbolType * x, int depth);
void printAstLoad(struct AstLoad * x, int depth);
void printAstTypeDef(struct AstTypeDef * x, int depth);
void printAstFlatType(struct AstFlatType * x, int depth);
void printAstTypeSymbols(struct AstTypeSymbols * x, int depth);
void printAstTypeBody(struct AstTypeBody * x, int depth);
void printAstTypeConstructor(struct AstTypeConstructor * x, int depth);
void printAstTypeFunction(struct AstTypeFunction * x, int depth);
void printAstTypeList(struct AstTypeList * x, int depth);
void printAstType(struct AstType * x, int depth);
void printAstCompositeFunction(struct AstCompositeFunction * x, int depth);
void printAstFunction(struct AstFunction * x, int depth);
void printAstArgList(struct AstArgList * x, int depth);
void printAstAltArgs(struct AstAltArgs * x, int depth);
void printAstAltFunction(struct AstAltFunction * x, int depth);
void printAstUnpack(struct AstUnpack * x, int depth);
void printAstNamedArg(struct AstNamedArg * x, int depth);
void printAstEnvType(struct AstEnvType * x, int depth);
void printAstFunCall(struct AstFunCall * x, int depth);
void printAstPackage(struct AstPackage * x, int depth);
void printAstExpressions(struct AstExpressions * x, int depth);
void printAstEnv(struct AstEnv * x, int depth);
void printAstIff(struct AstIff * x, int depth);
void printAstPrint(struct AstPrint * x, int depth);
void printAstDefinition(struct AstDefinition * x, int depth);
void printAstSinglePrototype(struct AstSinglePrototype * x, int depth);
void printAstTypeClause(struct AstTypeClause * x, int depth);
void printAstArg(struct AstArg * x, int depth);
void printAstExpression(struct AstExpression * x, int depth);
void printAstCharArray(struct AstCharArray * x, int depth);

/*
 * compare declarations
 */

bool eqAstNest(struct AstNest * a, struct AstNest * b);
bool eqAstDefinitions(struct AstDefinitions * a, struct AstDefinitions * b);
bool eqAstDefine(struct AstDefine * a, struct AstDefine * b);
bool eqAstPrototype(struct AstPrototype * a, struct AstPrototype * b);
bool eqAstPrototypeBody(struct AstPrototypeBody * a, struct AstPrototypeBody * b);
bool eqAstPrototypeSymbolType(struct AstPrototypeSymbolType * a, struct AstPrototypeSymbolType * b);
bool eqAstLoad(struct AstLoad * a, struct AstLoad * b);
bool eqAstTypeDef(struct AstTypeDef * a, struct AstTypeDef * b);
bool eqAstFlatType(struct AstFlatType * a, struct AstFlatType * b);
bool eqAstTypeSymbols(struct AstTypeSymbols * a, struct AstTypeSymbols * b);
bool eqAstTypeBody(struct AstTypeBody * a, struct AstTypeBody * b);
bool eqAstTypeConstructor(struct AstTypeConstructor * a, struct AstTypeConstructor * b);
bool eqAstTypeFunction(struct AstTypeFunction * a, struct AstTypeFunction * b);
bool eqAstTypeList(struct AstTypeList * a, struct AstTypeList * b);
bool eqAstType(struct AstType * a, struct AstType * b);
bool eqAstCompositeFunction(struct AstCompositeFunction * a, struct AstCompositeFunction * b);
bool eqAstFunction(struct AstFunction * a, struct AstFunction * b);
bool eqAstArgList(struct AstArgList * a, struct AstArgList * b);
bool eqAstAltArgs(struct AstAltArgs * a, struct AstAltArgs * b);
bool eqAstAltFunction(struct AstAltFunction * a, struct AstAltFunction * b);
bool eqAstUnpack(struct AstUnpack * a, struct AstUnpack * b);
bool eqAstNamedArg(struct AstNamedArg * a, struct AstNamedArg * b);
bool eqAstEnvType(struct AstEnvType * a, struct AstEnvType * b);
bool eqAstFunCall(struct AstFunCall * a, struct AstFunCall * b);
bool eqAstPackage(struct AstPackage * a, struct AstPackage * b);
bool eqAstExpressions(struct AstExpressions * a, struct AstExpressions * b);
bool eqAstEnv(struct AstEnv * a, struct AstEnv * b);
bool eqAstIff(struct AstIff * a, struct AstIff * b);
bool eqAstPrint(struct AstPrint * a, struct AstPrint * b);
bool eqAstDefinition(struct AstDefinition * a, struct AstDefinition * b);
bool eqAstSinglePrototype(struct AstSinglePrototype * a, struct AstSinglePrototype * b);
bool eqAstTypeClause(struct AstTypeClause * a, struct AstTypeClause * b);
bool eqAstArg(struct AstArg * a, struct AstArg * b);
bool eqAstExpression(struct AstExpression * a, struct AstExpression * b);
bool eqAstCharArray(struct AstCharArray * a, struct AstCharArray * b);

#endif

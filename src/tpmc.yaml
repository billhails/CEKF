#
# CEKF - VM supporting amb
# Copyright (C) 2022-2023  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

config:
    name: tpmc
    includes:
    - lambda.h

description: Term Pattern Matching Compiler types

structs:
    TpmcMatchRules:
        id: int
        rules: TpmcMatchRuleArray
        rootVariables: TpmcVariableArray
        errorState: TpmcState
        knownStates: TpmcStateArray

    TpmcMatchRule:
        action: TpmcState
        patterns: TpmcPatternArray

    TpmcVarPattern:
        path: HashSymbol
        name: HashSymbol

    TpmcComparisonPattern:
        path: HashSymbol
        previous: TpmcPattern
        current: TpmcPattern

    TpmcAssignmentPattern:
        path: HashSymbol
        name: HashSymbol
        value: TpmcPattern

    TpmcWildcardPattern:
        path: HashSymbol

    TpmcConstantPattern:
        path: HashSymbol
        value: LamExp

    TpmcConstructorPattern:
        path: HashSymbol
        tag: HashSymbol
        components: TpmcPatternArray

    TpmcTestState:
        path: HashSymbol
        arcs: TpmcArcArray

    TpmcFinalState:
        action: LamExp

    TpmcArc:
        state: TpmcState
        test: TpmcPattern

arrays:
    TpmcMatchRuleArray:
        dimension: 1
        entries: TpmcMatchRule

    TpmcVariableArray:
        dimension: 1
        entries: HashSymbol

    TpmcStateArray:
        dimension: 1
        entries: TpmcState

    TpmcPatternArray:
        dimension: 1
        entries: TpmcPattern

    TpmcArcArray:
        dimension: 1
        entries: TpmcArc

    TpmcMatrix:
        dimension: 2
        entries: TpmcPattern

unions:
    TpmcPattern:
        var: TpmcVarPattern
        comparison: TpmcComparisonPattern
        assignment: TpmcAssignmentPattern
        wildcard: TpmcWildcardPattern
        constant: TpmcConstantPattern
        constructor: TpmcConstructorPattern

    TpmcState:
        test: TpmcTestState
        final: TpmcFinalState
        error: void_ptr

enums: {}

primitives:
    HashSymbol:
        cname: "HashSymbol *"
        printFn: "printAstSymbol"
        markFn: "markHashSymbol"
        valued: true
    
    LamExp:
        cname: "LamExp *"
        printFn: "printLamExp"
        markFn: "markLamExp"
        valued: true

    void_ptr:
        cname: "void *"
        printf: "%p"
        valued: false

    int:
        cname: "int"
        printf: "%d"
        valued: true

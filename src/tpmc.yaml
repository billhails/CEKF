#
# CEKF - VM supporting amb
# Copyright (C) 2022-2024  Bill Hails
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

config:
    name: tpmc
    description: Term Pattern Matching Compiler types
    includes:
    - lambda.h
    limited_includes:
    - lambda_pp.h
    - bigint.h

structs:
    TpmcMatchRules:
        data:
            rules: TpmcMatchRuleArray
            rootVariables: TpmcVariableArray

    TpmcMatchRule:
        data:
            action: TpmcState
            patterns: TpmcPatternArray

    TpmcComparisonPattern:
        data:
            previous: TpmcPattern
            current: TpmcPattern

    TpmcAssignmentPattern:
        data:
            name: HashSymbol
            value: TpmcPattern

    TpmcConstructorPattern:
        data:
            tag: HashSymbol
            namespace: int
            info: LamTypeConstructorInfo
            components: TpmcPatternArray

    TpmcPattern:
        data:
            path: HashSymbol=NULL
            pattern: TpmcPatternValue

    TpmcTestState:
        data:
            path: HashSymbol
            arcs: TpmcArcArray

    TpmcFinalState:
        data:
            action: LamExp

    TpmcState:
        data:
            refcount: int=0
            stamp: int
            freeVariables: TpmcVariableTable=NULL
            state: TpmcStateValue

    TpmcArc:
        data:
            state: TpmcState
            test: TpmcPattern
            freeVariables: TpmcVariableTable

    TpmcArcList:
        data:
            arc: TpmcArc
            next: TpmcArcList

    TpmcIntList:
        data:
            integer: int
            next: TpmcIntList

hashes:
    TpmcVariableTable:
        data: {}

    TpmcSubstitutionTable:
        data:
            entries: HashSymbol

    TpmcPatternTable:
        data:
            entries: TpmcPattern

unions:
    TpmcPatternValue:
        data:
            var: HashSymbol
            comparison: TpmcComparisonPattern
            assignment: TpmcAssignmentPattern
            wildcard: void_ptr
            character: character
            biginteger: MaybeBigInt
            constructor: TpmcConstructorPattern
            tuple: TpmcPatternArray

    TpmcStateValue:
        data:
            test: TpmcTestState
            final: TpmcFinalState
            error: void_ptr

tags:
    - TpmcStateArray
    - TpmcPatternArray

arrays:
    TpmcMatchRuleArray:
        data:
            dimension: 1
            entries: TpmcMatchRule

    TpmcVariableArray:
        data:
            dimension: 1
            entries: HashSymbol

    TpmcPatternArray:
        data:
            dimension: 1
            entries: TpmcPattern

    TpmcStateArray:
        data:
            dimension: 1
            entries: TpmcState

    TpmcArcArray:
        data:
            dimension: 1
            entries: TpmcArc

    TpmcIntArray:
        data:
            dimension: 1
            entries: int

    TpmcMatrix:
        data:
            dimension: 2
            entries: TpmcPattern

primitives: !include primitives.yaml

external:
    LamExp:
        data:
            cname: "LamExp *"
            printFn: ppLamExpD
            markFn: markLamExp
            copyFn: copyLamExp
            valued: true

    LamTypeConstructorInfo:
        data:
            cname: "LamTypeConstructorInfo *"
            printFn: printLamTypeConstructorInfo
            markFn: markLamTypeConstructorInfo
            copyFn: copyLamTypeConstructorInfo
            valued: true


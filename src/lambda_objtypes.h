#ifndef cekf_lambda_objtypes_h
#define cekf_lambda_objtypes_h
/*
 * CEKF - VM supporting amb
 * Copyright (C) 2022-2023  Bill Hails
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Plain lambda structures generated by lambda conversion.
 *
 * generated from src/lambda.yaml by makeAST.py
 */

#define LAMBDA_OBJTYPES() OBJTYPE_LAMLAM, \
OBJTYPE_LAMVARLIST, \
OBJTYPE_LAMPRIMAPP, \
OBJTYPE_LAMUNARYAPP, \
OBJTYPE_LAMSEQUENCE, \
OBJTYPE_LAMLIST, \
OBJTYPE_LAMAPPLY, \
OBJTYPE_LAMCONSTANT, \
OBJTYPE_LAMCONSTRUCT, \
OBJTYPE_LAMDECONSTRUCT, \
OBJTYPE_LAMMAKEVEC, \
OBJTYPE_LAMIFF, \
OBJTYPE_LAMCOND, \
OBJTYPE_LAMINTCONDCASES, \
OBJTYPE_LAMCHARCONDCASES, \
OBJTYPE_LAMMATCH, \
OBJTYPE_LAMMATCHLIST, \
OBJTYPE_LAMINTLIST, \
OBJTYPE_LAMLET, \
OBJTYPE_LAMLETREC, \
OBJTYPE_LAMLETRECBINDINGS, \
OBJTYPE_LAMCONTEXT, \
OBJTYPE_LAMAND, \
OBJTYPE_LAMOR, \
OBJTYPE_LAMAMB, \
OBJTYPE_LAMTYPEDEFS, \
OBJTYPE_LAMTYPEDEFLIST, \
OBJTYPE_LAMTYPEDEF, \
OBJTYPE_LAMTYPECONSTRUCTORLIST, \
OBJTYPE_LAMTYPE, \
OBJTYPE_LAMTYPEARGS, \
OBJTYPE_LAMTYPECONSTRUCTOR, \
OBJTYPE_LAMTYPECONSTRUCTORARGS, \
OBJTYPE_LAMTYPEFUNCTION, \
OBJTYPE_LAMTYPECONSTRUCTORINFO, \
OBJTYPE_LAMEXP, \
OBJTYPE_LAMCONDCASES, \
OBJTYPE_LAMTYPECONSTRUCTORTYPE

#define LAMBDA_OBJTYPE_CASES() \
case OBJTYPE_LAMLAM:\
case OBJTYPE_LAMVARLIST:\
case OBJTYPE_LAMPRIMAPP:\
case OBJTYPE_LAMUNARYAPP:\
case OBJTYPE_LAMSEQUENCE:\
case OBJTYPE_LAMLIST:\
case OBJTYPE_LAMAPPLY:\
case OBJTYPE_LAMCONSTANT:\
case OBJTYPE_LAMCONSTRUCT:\
case OBJTYPE_LAMDECONSTRUCT:\
case OBJTYPE_LAMMAKEVEC:\
case OBJTYPE_LAMIFF:\
case OBJTYPE_LAMCOND:\
case OBJTYPE_LAMINTCONDCASES:\
case OBJTYPE_LAMCHARCONDCASES:\
case OBJTYPE_LAMMATCH:\
case OBJTYPE_LAMMATCHLIST:\
case OBJTYPE_LAMINTLIST:\
case OBJTYPE_LAMLET:\
case OBJTYPE_LAMLETREC:\
case OBJTYPE_LAMLETRECBINDINGS:\
case OBJTYPE_LAMCONTEXT:\
case OBJTYPE_LAMAND:\
case OBJTYPE_LAMOR:\
case OBJTYPE_LAMAMB:\
case OBJTYPE_LAMTYPEDEFS:\
case OBJTYPE_LAMTYPEDEFLIST:\
case OBJTYPE_LAMTYPEDEF:\
case OBJTYPE_LAMTYPECONSTRUCTORLIST:\
case OBJTYPE_LAMTYPE:\
case OBJTYPE_LAMTYPEARGS:\
case OBJTYPE_LAMTYPECONSTRUCTOR:\
case OBJTYPE_LAMTYPECONSTRUCTORARGS:\
case OBJTYPE_LAMTYPEFUNCTION:\
case OBJTYPE_LAMTYPECONSTRUCTORINFO:\
case OBJTYPE_LAMEXP:\
case OBJTYPE_LAMCONDCASES:\
case OBJTYPE_LAMTYPECONSTRUCTORTYPE:\


void markLambdaObj(struct Header *h);
void freeLambdaObj(struct Header *h);
char *typenameLambdaObj(int type);

#endif

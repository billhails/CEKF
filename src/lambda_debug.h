#ifndef cekf_lambda_debug_h
#define cekf_lambda_debug_h
/*
 * CEKF - VM supporting amb
 * Copyright (C) 2022-2023  Bill Hails
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Plain lambda structures generated by lambda conversion.
 *
 * Generated from src/lambda.yaml by tools/makeAST.py
 */

#include "lambda_helper.h"
#include "bigint.h"
#include "tc.h"
#include "tc_debug.h"

/*
 * print declarations
 */

void printLamLam(struct LamLam * x, int depth);
void printLamVarList(struct LamVarList * x, int depth);
void printLamPrimApp(struct LamPrimApp * x, int depth);
void printLamUnaryApp(struct LamUnaryApp * x, int depth);
void printLamSequence(struct LamSequence * x, int depth);
void printLamList(struct LamList * x, int depth);
void printLamApply(struct LamApply * x, int depth);
void printLamConstant(struct LamConstant * x, int depth);
void printLamConstruct(struct LamConstruct * x, int depth);
void printLamDeconstruct(struct LamDeconstruct * x, int depth);
void printLamMakeVec(struct LamMakeVec * x, int depth);
void printLamIff(struct LamIff * x, int depth);
void printLamCond(struct LamCond * x, int depth);
void printLamIntCondCases(struct LamIntCondCases * x, int depth);
void printLamCharCondCases(struct LamCharCondCases * x, int depth);
void printLamMatch(struct LamMatch * x, int depth);
void printLamMatchList(struct LamMatchList * x, int depth);
void printLamIntList(struct LamIntList * x, int depth);
void printLamLet(struct LamLet * x, int depth);
void printLamLetRec(struct LamLetRec * x, int depth);
void printLamLetRecBindings(struct LamLetRecBindings * x, int depth);
void printLamContext(struct LamContext * x, int depth);
void printLamAnd(struct LamAnd * x, int depth);
void printLamOr(struct LamOr * x, int depth);
void printLamAmb(struct LamAmb * x, int depth);
void printLamPrint(struct LamPrint * x, int depth);
void printLamTypeDefs(struct LamTypeDefs * x, int depth);
void printLamTypeDefList(struct LamTypeDefList * x, int depth);
void printLamTypeDef(struct LamTypeDef * x, int depth);
void printLamTypeConstructorList(struct LamTypeConstructorList * x, int depth);
void printLamType(struct LamType * x, int depth);
void printLamTypeArgs(struct LamTypeArgs * x, int depth);
void printLamTypeConstructor(struct LamTypeConstructor * x, int depth);
void printLamTypeConstructorArgs(struct LamTypeConstructorArgs * x, int depth);
void printLamTypeFunction(struct LamTypeFunction * x, int depth);
void printLamTypeConstructorInfo(struct LamTypeConstructorInfo * x, int depth);
void printLamExp(struct LamExp * x, int depth);
void printLamCondCases(struct LamCondCases * x, int depth);
void printLamTypeConstructorType(struct LamTypeConstructorType * x, int depth);

/*
 * compare declarations
 */

bool eqLamLam(struct LamLam * a, struct LamLam * b);
bool eqLamVarList(struct LamVarList * a, struct LamVarList * b);
bool eqLamPrimApp(struct LamPrimApp * a, struct LamPrimApp * b);
bool eqLamUnaryApp(struct LamUnaryApp * a, struct LamUnaryApp * b);
bool eqLamSequence(struct LamSequence * a, struct LamSequence * b);
bool eqLamList(struct LamList * a, struct LamList * b);
bool eqLamApply(struct LamApply * a, struct LamApply * b);
bool eqLamConstant(struct LamConstant * a, struct LamConstant * b);
bool eqLamConstruct(struct LamConstruct * a, struct LamConstruct * b);
bool eqLamDeconstruct(struct LamDeconstruct * a, struct LamDeconstruct * b);
bool eqLamMakeVec(struct LamMakeVec * a, struct LamMakeVec * b);
bool eqLamIff(struct LamIff * a, struct LamIff * b);
bool eqLamCond(struct LamCond * a, struct LamCond * b);
bool eqLamIntCondCases(struct LamIntCondCases * a, struct LamIntCondCases * b);
bool eqLamCharCondCases(struct LamCharCondCases * a, struct LamCharCondCases * b);
bool eqLamMatch(struct LamMatch * a, struct LamMatch * b);
bool eqLamMatchList(struct LamMatchList * a, struct LamMatchList * b);
bool eqLamIntList(struct LamIntList * a, struct LamIntList * b);
bool eqLamLet(struct LamLet * a, struct LamLet * b);
bool eqLamLetRec(struct LamLetRec * a, struct LamLetRec * b);
bool eqLamLetRecBindings(struct LamLetRecBindings * a, struct LamLetRecBindings * b);
bool eqLamContext(struct LamContext * a, struct LamContext * b);
bool eqLamAnd(struct LamAnd * a, struct LamAnd * b);
bool eqLamOr(struct LamOr * a, struct LamOr * b);
bool eqLamAmb(struct LamAmb * a, struct LamAmb * b);
bool eqLamPrint(struct LamPrint * a, struct LamPrint * b);
bool eqLamTypeDefs(struct LamTypeDefs * a, struct LamTypeDefs * b);
bool eqLamTypeDefList(struct LamTypeDefList * a, struct LamTypeDefList * b);
bool eqLamTypeDef(struct LamTypeDef * a, struct LamTypeDef * b);
bool eqLamTypeConstructorList(struct LamTypeConstructorList * a, struct LamTypeConstructorList * b);
bool eqLamType(struct LamType * a, struct LamType * b);
bool eqLamTypeArgs(struct LamTypeArgs * a, struct LamTypeArgs * b);
bool eqLamTypeConstructor(struct LamTypeConstructor * a, struct LamTypeConstructor * b);
bool eqLamTypeConstructorArgs(struct LamTypeConstructorArgs * a, struct LamTypeConstructorArgs * b);
bool eqLamTypeFunction(struct LamTypeFunction * a, struct LamTypeFunction * b);
bool eqLamTypeConstructorInfo(struct LamTypeConstructorInfo * a, struct LamTypeConstructorInfo * b);
bool eqLamExp(struct LamExp * a, struct LamExp * b);
bool eqLamCondCases(struct LamCondCases * a, struct LamCondCases * b);
bool eqLamTypeConstructorType(struct LamTypeConstructorType * a, struct LamTypeConstructorType * b);

#endif

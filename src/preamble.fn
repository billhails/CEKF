//
// CEKF - VM supporting amb
// Copyright (C) 2022-2023  Bill Hails
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

// these are typedefs and functions that the compiler requires to be
// pre-defined, for example the infix `@` is mapped to `cons`, `@@` to `append`,
// prefix `<` to `car` etc.
// `puts` is required for the print system, and the type `cmp` for the `<=>` operator.
namespace


infix right 2 "then" amb;
infix left 5 "==" EQUALTO;
infix left 5 "!=" NOTEQUALTO;
infix left 5 "≠" NOTEQUALTO;
infix left 5 ">" GREATERTHAN;
infix left 5 "<" LESSTHAN;
infix left 5 "<=" LESSTHANOREQUALTO;
infix left 5 ">=" GREATERTHANOREQUALTO;
infix none 5 "<=>" COMPARISON;
infix none 5 "⪌" COMPARISON;
infix left 10 "+" ADDITION;
infix left 10 "-" SUBTRACTION;
prefix 11 "-" NEGATION;
macro NUMERICIDENTITY(x) { x + 0 }
prefix 11 "+" NUMERICIDENTITY;
infix left 11 "*" MULTIPLICATION;
infix left 11 "×" MULTIPLICATION;
infix left 11 "/" DIVISION;
infix left 11 "÷" DIVISION;
infix left 11 "%" MODULUS;
infix left 12 "**" EXPONENTIAL;
prefix 13 "here" callcc;

typedef cmp { lt | eq | gt }
typedef bool { false | true }
typedef list(#t) { nil | cons(#t, list(#t)) }
alias string = list(char);
typedef maybe(#t) { nothing | some(#t) }
typedef try(#f, #s) { failure(#f) | success(#s) }
typedef basic_type { basic_null | basic_number(number) | basic_string(string) | basic_char(char) }
typedef io_mode { io_read | io_write | io_append }
typedef ftype_type {
    ftype_socket |
    ftype_symlink |
    ftype_regular |
    ftype_block |
    ftype_dir |
    ftype_char |
    ftype_fifo
}

typedef unicode_general_category_type {
    GC_Ll | GC_Lm | GC_Lo | GC_Lt | GC_Lu |
    GC_Mc | GC_Me | GC_Mn |
    GC_Nd | GC_Nl | GC_No |
    GC_Pc | GC_Pd | GC_Pe | GC_Pf | GC_Pi | GC_Po | GC_Ps |
    GC_Sc | GC_Sk | GC_Sm | GC_So |
    GC_Zl | GC_Zp | GC_Zs |
    GC_Cc | GC_Cf | GC_Co | GC_Cs | GC_Cn 
}

// it would be nice if we could do something like this:
// syntax if (test) {consequent} else {alternative} =
//     { fn {(true) { consequent } (false) { alternative }}(test) }

fn NOT {
    (true) { false }
    (false) { true }
}
prefix 4 "not" NOT;

// macros aren't really macros, they're just lazy functions but that gets
// us most of the same behaviour.
macro AND(a, b) { if (a) { b } else { false } }
infix left 3 "and" AND;

macro OR(a, b) { if (a) { true } else { b } }
infix left 3 "or" OR;

fn XOR {
    (true, true) { false }
    (true, false) { true }
    (false, true) { true }
    (false, false) { false }
}
infix left 3 "xor" XOR;

macro NAND(a, b) { not (a and b) }
infix left 3 "nand" NAND;

macro NOR(a, b) { not (a or b) }
infix left 3 "nor" NOR;

macro XNOR(a, b) { not (a xor b) }
infix left 3 "xnor" XNOR;

infix right 10 "@" cons;

fn assert_(line, file, condition) {
    if (condition) {
        true
    } else {
        puts("assertion failed in ");
        puts(file);
        puts(" line ");
        putn(line);
        putc('\n');
        assertion();
    }
}

// tail-recursive version
fn factorial (n) {
    let
        fn h {
            (0, a) { a }
            (n, a) { h(n - 1, n * a) }
        }
    in
        h(n, 1)
}

postfix 13 "!" factorial;

fn error_(line, file, message) {
    puts("error: ");
    puts(message);
    puts(" at ");
    puts(file);
    puts(" line ");
    putn(line);
    putc('\n');
    exit(1);
}

infix right 13 "of" fn (f, g, x) { f(g(x)) };

prefix 14 "&" THUNK;
macro THUNK(x) { fn () {x} }

prefix 14 "*" FORCE;
fn FORCE(thunk) { thunk() }

fn append {
    ([], b) { b }
    (h @ t, b) { h @ append(t, b) }
}

infix right 9 "@@" append;

unsafe fn car {
    (h @ _) { h }
}
prefix 6 "<" car;

unsafe fn cdr {
    (_ @ t) { t }
}
prefix 6 ">" cdr;

fn print_list(helper, l) {
    let
        fn h1 {
            ([]) { true }
            (h @ t) {
                helper(h);
                h2(t)
            }
        }
        fn h2 {
            ([]) { true }
            (h @ t) {
                puts(", ");
                helper(h);
                h2(t)
            }
        }
    in
        puts("[");
        h1(l);
        puts("]");
        l
}

fn print_fn(f) {
    puts("<function>");
    f
}

fn print_opaque(f) {
    puts("<opaque>");
    f
}

fn print_int(n) {
    putn(n);
    n
}

fn print_char(c) {
    putc('\'');
    putc(c);
    putc('\'');
    c
}

fn print_(v) {
    putv(v);
    v
}

fn print_string(s) {
    putc('"');
    puts(s);
    putc('"');
    s
}

fn print_tuple_0(t) {
   puts("#()");
   t
}

fn print_tuple_1(pa, t=#(a)) {
   puts("#(");
   pa(a);
   puts(")");
   t
}

fn print_tuple_2(pa, pb, t=#(a, b)) {
   puts("#(");
   pa(a);
   puts(", ");
   pb(b);
   puts(")");
   t
}

fn print_tuple_3(pa, pb, pc, t=#(a, b, c)) {
   puts("#(");
   pa(a);
   puts(", ");
   pb(b);
   puts(", ");
   pc(c);
   puts(")");
   t
}

fn print_tuple_4(pa, pb, pc, pd, t=#(a, b, c, d)) {
   puts("#(");
   pa(a);
   puts(", ");
   pb(b);
   puts(", ");
   pc(c);
   puts(", ");
   pd(d);
   puts(")");
   t
}

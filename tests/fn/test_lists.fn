let
    link "listutils.fn" as list;
in
    assert(list.member('b', "abc"));
    assert(list.exclude("ab", "abcba") == "c");
    assert(list.map(fn (a, b) {a + b}(1), [1, 2, 3]) == [2, 3, 4]);
    assert(list.length("abc") == 3);
    assert(list.foldl(fn (a, b) { a + b }, 0, [1, 2, 3]) == 6);
    assert(list.foldr(fn (a, b) { a + b }, 0, [1, 2, 3]) == 6);
    assert(list.foldl1(fn (a, b) { a + b }, [1, 2, 3]) == 6);
    assert(list.foldr1(fn (a, b) { a + b }, [1, 2, 3]) == 6);
    assert(list.reverse("abc") == "cba");
    assert(list.scanl(fn (a, b) { a + b }, 0, [1, 2, 3]) == [6, 3, 1, 0]);
    assert(list.filter(fn (x) { x != 2 }, [1, 2, 3]) == [1, 3]);
    assert(list.concat(["ab", "cd"]) == "abcd");
    assert(list.join(", ", ["hello", "world"]) == "hello, world");
    assert(list.any(fn (x) { x == 2 }, [1, 2, 3]));
    assert(list.none(fn (x) { x == 2 }, [1, 3, 4]));
    assert(list.all(fn (x) { x % 2 == 0 }, [2, 4, 6, 8]));
    assert(not list.all(fn (x) { x % 2 == 0 }, [2, 5, 6, 8]));
    assert(list.repeat(5, 'x') == "xxxxx");
    assert(list.nth(2, "abcd") == 'c');
    assert(list.sum([1, 2, 3, 4]) == 10);
    assert(list.product([1, 2, 3, 4]) == 24);
    assert(list.zip([1, 2, 3], "abcd") == [#(1, 'a'), #(2, 'b'), #(3, 'c')]);
    assert(list.zipWith(fn (x, y) { x + y }, [1, 2], [3, 4]) == [4, 6]);
    assert(list.last("abc") == 'c');
    assert(list.empty([]));
    assert(not list.empty([1]));
    assert(list.take(5, "123456") == "12345");
    assert(list.drop(2, "123456") == "3456");
    assert(list.minimum([5, 1, 3]) == 1);
    assert(list.maximum([5, 1, 3]) == 5);
    assert(list.range(2, 5) == [2, 3, 4, 5]);
    assert(list.dedup("abcba") == "cba");
    assert(list.sort("abcba") == "aabbc");

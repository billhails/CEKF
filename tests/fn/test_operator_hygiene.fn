//
// Test hygienic operator definitions
//

let
    // Test 1: Simple prefix operator with bare symbol
    fn double(x) { x * 2 }
    prefix 10 "~" double;
    
    // Test 2: Prefix operator with inline function
    prefix 10 "!" fn(x) { x + 1 };
    
    // Test 3: Prefix operator with complex expression
    fn add_three(x) { x + 3 }
    prefix 10 "%" fn(y) { add_three(y * 2) };
    
    // Test 4: Operator with captured variable (hygiene test)
    fn make_adder(n) {
        fn(x) { x + n }
    }
    prefix 10 "incr" make_adder(100);
    
    // Test 5: Word operators
    fn negate(x) { 0 - x }
    prefix 10 "neg" negate;
in
    assert(~5 == 10);
    assert(~10 == 20);
    
    assert(!5 == 6);
    assert(!10 == 11);
    
    assert(%5 == 13);  // (5 * 2) + 3 = 13
    assert(%10 == 23); // (10 * 2) + 3 = 23
    
    assert(incr 5 == 105);
    assert(incr 20 == 120);
    
    assert(neg 5 == -5);
    assert(neg -10 == 10);
    
    // Test 6: Operator hygiene - scoped redefinition
    {
        let
            fn triple(x) { x * 3 }
            prefix 10 "triple" triple;
        in
            assert(triple 5 == 15);
            assert(triple 10 == 30);
            
            // Nested scope with different definition
            {
                let
                    fn quadruple(x) { x * 4 }
                    prefix 10 "quad" quadruple;
                in
                    assert(quad 5 == 20);
                    assert(quad 10 == 40)
            };
            
            // triple should still work here
            assert(triple 5 == 15);
            assert(triple 10 == 30)
    };
    
    puts("All operator hygiene tests passed!\n")





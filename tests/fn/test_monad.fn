let
    fn andThen {
        (nothing, _) { nothing }
        (some(a), f) { f(a) }
    }

    infix right 100 ">>=" andThen;

    fn maybePlus(ma, mb) {
        ma >>= fn(a) { mb >>= fn(b) { some(a + b) } }
    }

    fn safeDiv {
        (a, 0) { nothing }
        (a, b) { some(a / b) }
    }

    fn maybeDiv (ma, mb) {
        ma >>= fn(a) { mb >>= fn(b) { safeDiv(a, b) } }
    }
in
    assert(maybePlus(some(5), some(10)) == some(15));
    assert(maybePlus(some(5), nothing) == nothing);
    assert(maybePlus(nothing, some(10)) == nothing);
    assert(maybePlus(nothing, nothing) == nothing);
    assert(maybePlus(some(5), maybeDiv(some(15), some(3))) == some(10));
    assert(maybePlus(some(5), maybeDiv(some(15), some(0))) == nothing);

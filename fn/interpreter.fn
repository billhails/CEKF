let
    typedef environment { frame(string, expression, environment) | root }

    fn lookup {
        (name, frame(name, value, _)) { value }
        (name, frame(_, _, parent))   { lookup(name, parent) }
        (name, root)                  { error("symbol not defined: " @@ name) }
    }

    typedef expression {
          num(number)
        | symbol(string)
        | addition(expression, expression)
        | subtraction(expression, expression)
        | multiplication(expression, expression)
        | division(expression, expression)
        | conditional(expression, expression, expression)
        | λ(expression, expression)
        | closure(expression, environment)
        | application(expression, expression)
    }

    unsafe fn eval {
        (n = num(_), env)                  { n }
        (symbol(name), env)                { lookup(name, env) }
        (addition(e1, e2), env)            { add(eval(e1, env), eval(e2, env)) }
        (subtraction(e1, e2), env)         { sub(eval(e1, env), eval(e2, env)) }
        (multiplication(e1, e2), env)      { mul(eval(e1, env), eval(e2, env)) }
        (division(e1, e2), env)            { div(eval(e1, env), eval(e2, env)) }
        (conditional(test, con, alt), env) { cond(test, con, alt, env) }
        (lambda = λ(_, _), env)            { closure(lambda, env) }
        (application(function, arg), env)  { apply(eval(function, env), eval(arg, env)) }
    }

    unsafe fn add (num(a), num(b)) { num(a + b) }
    unsafe fn sub (num(a), num(b)) { num(a - b) }
    unsafe fn mul (num(a), num(b)) { num(a * b) }
    unsafe fn div (num(a), num(b)) { num(a / b) }

    fn cond(test, con, alt, env) {
        unsafe switch (eval(test, env)) {
            (num(0)) { eval(alt, env) }
            (num(_)) { eval(con, env) }
        }
    }

    unsafe fn apply (closure(λ(symbol(name), body), env), arg) {
        eval(body, frame(name, arg, env))
    }

in
    // try it out: ((λ (x) (if x (+ x 2) x)) a) = 3 | a: 1
    print(eval(
        application(
            λ(
                symbol("x"),
                conditional(
                    symbol("x"),
                    addition(symbol("x"), num(2)),
                    symbol("x")
                )
            ),
            symbol("a")
        ),
        frame("a", num(1), root)
    ));

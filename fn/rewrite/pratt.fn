let
    link "pratt_lexer.fn" as lex;
    link "pratt_sexpr.fn" as exp;
    link "../ioutils.fn" as io;
    infix left 90 "=>" fn (arg, fun) { fun(arg) };
    prefix 80 "$" io.to_string;

    fn expr(str) {
        expr_bp(lex.new(str), 0)
    }

    fn prefix_bp {
        ('+') | ('-') { 5 }
        (x) { error($x) }
    }

    fn infix_bp {
        ('+') | ('-') { #(1, 2) }
        ('*') | ('/') { #(3, 4) }
        ('.') { #(8, 7) }
        (x) { error($x) }
    }

    fn expr_bp(lexer, min_bp) {
        let
            fn loop {
                (lhs, nothing, lexer) {
                    #(lhs, lexer)
                }
                (lhs, some(lex.Op(op)), lexer) {
                    infix_bp(op) => fn (#(l_bp, r_bp)) {
                        if (l_bp < min_bp) {
                            #(lhs, lexer)
                        } else {
                            lex.next(lexer) => unsafe fn (some(#(_, lexer))) {
                                expr_bp(lexer, r_bp) => fn (#(rhs, lexer)) {
                                    loop(exp.Cons(op, [lhs, rhs]), lex.peek(lexer), lexer)
                                }
                            }
                        }
                    }
                }
                (_, x, _) {
                    error($x)
                }
            }
        in
            switch(lex.next(lexer)) {
                (some(#(lex.Atom(it), lexer))) {
                    loop(exp.Atom(it), lex.peek(lexer), lexer)
                }
                (some(#(lex.Op(it), lexer))) {
                    expr_bp(lexer, prefix_bp(it)) => fn (#(rhs, lexer)) {
                        [];
                        loop(exp.Cons(it, [rhs]), lex.peek(lexer), lexer)
                    }
                }
                (x) {
                    error($x)
                }
            }
    }
in
    print(expr("1 + - 2 + f . g . h * 3 * 4"))

let
///////////////////////////////////////////////////////////////////////////
// PRELIMINARIES
///////////////////////////////////////////////////////////////////////////
    link "../ioutils.fn" as io;
    link "../dictionary.fn" as dict;
    link "../listutils.fn" as lst;

    infix left 8 "=>" fn (arg, fun) { fun(arg) };
    infix left 8 "|>" fn (l, f) { lst.map(f, l) };
    infix left 8 "?" fn (l, n) { lst.nth(n, l) };
    infix left 8 "??" fn (l, ns) { lst.nths(ns, l) };
    infix left 8 ".." lst.range;
    prefix 14 "$" io.to_string;

    // input data structures
    typedef pattern {
        wildcard |
        variable(string) |
        const(number) |
        ctor(string, list(pattern)) |
        tuple(list(pattern)) |
        named(string, pattern) | // input name=pattern
        comparison(string) |     // output re-used variable in subsequent pattern
        tagged(string, pattern)  // output tag=pattern
    }

    print pattern(p) {
        let
            fn i {
                ([]) { "" }
                (p @ []) { h(p) }
                (p @ t) { h(p); puts(", "); i(t) }
            }
            fn h {
                (wildcard) { puts("_") }
                (variable(name)) { puts('$' @ name) }
                (comparison(tag)) { puts("="); puts(tag) }
                (const(n)) { puts($n) }
                (ctor(tag, pats)) {
                    puts(tag);
                    if (lst.length(pats) > 0) {
                        puts("("); i(pats); puts(")")
                    } else { "" }
                }
                (tuple(pats)) {
                    puts("#("); i(pats); puts(")")
                }
                (named(name, p)) { puts('$' @ name); puts(":="); h(p) }
                (tagged(tag, p)) { puts(tag); putc('='); h(p) }
            }
        in h(p); p
    }

    // DAG components (state table)
    alias substs = dict.Dict(string, string);
    alias refcounts = dict.Dict(string, number);

    typedef Arc { arc(pattern, list(string), tpmc) }

    typedef tpmc { 
        final(string, list(string), number, substs, code) |
        test(string, string, list(string), number, list(Arc))
    }

    print tpmc(state) {
        let fn h {
            (final(stamp, free, refcount, substs, code)) {
                puts("FINAL stamp:");
                puts(stamp);
                puts(" refcount:");
                putn(refcount);
                puts(" free:");
                print(free);
                puts(" substs:");
                print(substs);
                puts(" code:");
                print(code);
                ""
            }
            (test(stamp, var, free, refcount, arcs)) {
                let fn a {
                    (arc(pat, free, s) @ t) {
                        puts("ARC pat::");
                        print(pat);
                        puts(" free:");
                        print(free);
                        puts(" => state:");
                        h(s);
                        puts(";\n");
                        a(t)
                    }
                    ([]) { "" }
                } in
                    puts("TEST stamp:");
                    puts(stamp);
                    puts(" var:");
                    puts(var);
                    puts(" free:");
                    print(free);
                    puts(" refcount:");
                    putn(refcount);
                    puts(" arcs:[\n");
                    a(arcs);
                    puts("]\n");
            }
        }
        in h(state);
        state;
    }

    // Intermediate Representation (output)
    typedef code {
        symbol(string) |
        case(code, list(code)) |
        when(pattern, code) |
        letrec(list(#(code, code)), code) |
        lambda(list(code), code) |
        apply(code, list(code))
    }

    print code(c) {
    let
        fn pargs {
            ([]) { "" }
            ([a]) { h(0, false, a) }
            (a @ b) { h(0, false, a); puts(", "); pargs(b) }
        }
        fn h {
            (n, dp, symbol(name)) { pad(n, dp); puts(name) }
            (n, dp, case(c, cases)) {
                pad(n, dp);
                puts("consider(");
                h(n, false, c);
                puts(") {\n");
                cases |> fn (c) { h(n + 1, true, c); puts("\n"); };
                pad(n, true); puts("}");
            }
            (n, dp, when(p, c)) {
                pad(n, dp);
                puts("when ");
                print(p);
                h(n + 1, true, c);
            }
            (n, dp, letrec(defs, body)) {
                pad(n, dp);
                puts("let\n");
                defs |> fn (#(sym, val)) {
                    h(n + 1, true, sym);
                    puts(" = ");
                    h(n + 1, false, val);
                    puts("\n");
                };
                pad(n, true);
                puts("in\n");
                h(n + 1, true, body);
            }
            (n, dp, lambda(args, body)) {
                pad(n, dp);
                puts("fn (");
                pargs(args);
                puts(") {\n");
                h(n + 1, true, body);
                puts("\n");
                pad(n, true);
                puts("}");
            }
            (n, dp, apply(exp, args)) {
                h(n, dp, exp);
                puts("(");
                pargs(args);
                puts(")");
            }
        }
        fn pad(n, dp) {
            puts(lst.repeat(if(dp){n * 2} else {0}, ' '))
        }
    in
        h(0, true, c);
        c;
    }

    // makeTag: string -> number -> string
    fn makeTag (base, n) { base @@ "$" @@ $n }

    // makeLabel: tpmc -> string
    fn makeLabel {
        (final(stamp, _, _, _, _)) { stamp }
        (test(_, var, _, _, arcs)) {
            let fn arcLabel (arc(pat, _, s)) {
                    $pat @@ "=>" @@ makeLabel(s)
                }
            in
                var @@
                    "[" @@
                    lst.join(",", arcs |> arcLabel) @@
                    "]";
        }
    }

///////////////////////////////////////////////////////////////////////////
// STAGE 1 RENAMING
///////////////////////////////////////////////////////////////////////////

    // rename: list(#(list(pattern), code)) ->
    //                  #(list(list(pattern)), list(tpmc))
    fn rename(rows) {
        let
            // mapTag: string -> number -> substs ->
            //                  list(pattern) -> #(list(pattern), substs)
            fn mapTag {
                (_, _, d, []) { #([], d) }
                (base, n, d, pat @ pats) {
                    let
                        // tag: string -> pattern -> substs ->
                        //                     #(pattern, substs)
                        fn tag {
                            (base, wildcard, d) {
                                #(tagged(base, wildcard), d)
                            }
                            (base, variable(name), d) {
                                switch (dict.lookup(name, d)) {
                                    (nothing) {
                                        #(tagged(base, wildcard),
                                          dict.insert(name, base, d))
                                    }
                                    (some(other)) {
                                        #(tagged(base, comparison(other)), d)
                                    }
                                }
                            }
                            (base, c = const(_), d) {
                                #(tagged(base, c), d)
                            }
                            (base, ctor(name, pats), d) {
                                mapTag(base, 0, d, pats) =>
                                fn (#(pats, d)) {
                                    #(tagged(base, ctor(name, pats)), d)
                                }
                            }
                            (base, tuple(pats), d) {
                                mapTag(base, 0, d, pats) =>
                                fn (#(pats, d)) {
                                    #(tagged(base, tuple(pats)), d)
                                }
                            }
                            (base, named(name, pat), d) {
                                tag(base, pat, dict.insert(name, base, d))
                            }
                            (_, comparison(t), _) {
                                error("already compared: " @@ t)
                            }
                            (_, tagged(t, _), _) {
                                error("already tagged: " @@ t)
                            }
                        }
                    in
                        tag(makeTag(base, n), pat, d) => fn (#(pat, d)) {
                            mapTag(base, n + 1, d, pats) =>
                            fn (#(pats, d)) {
                                #(pat @ pats, d)
                            }
                        }
                }
            }
            // applySubsts: substs -> code -> code
            fn applySubsts (substs, target) {
                let fn h {
                    (symbol(s)) {
                        switch (dict.lookup(s, substs)) {
                            (some(v)) { symbol(v) }
                            (nothing) { symbol(s) }
                        }
                    }
                    (case(cond, rules)) { case(h(cond), rules |> h) }
                    (when(pattern, action)) { when(pattern, h(action)) }
                    (letrec(defs, body)) {
                        letrec(defs |> fn {
                            (#(name, value)) { #(h(name), h(value)) }
                        }, h(body))
                    }
                    (lambda(args, code)) { lambda(args |> h, h(code)) }
                    (apply(code, args)) { apply(h(code), args |> h) }
                }
                in h(target)
            }
            // renameRow: #(list(pattern), code) -> #(list(pattern), tpmc)
            fn renameRow (#(row, target, label)) {
                mapTag("x", 0, dict.E, row) => fn(#(pats, substs)) {
                    #(pats,
                      final(label,
                            [],
                            1,
                            substs,
                            applySubsts(substs, target)))
                }
            }
            // labelRows: list(#(list(pattern), code)) ->
            //                list(#(list(pattern), code, string))
            fn labelRows (rows) {
                let fn h {
                    ([], _) { [] }
                    (#(pats, body) @ rest, n) {
                        #(pats, body, "Q$" @@ $n) @ h(rest, n + 1)
                    }
                }
                in h(rows, 0)
            }
        in
            rows => labelRows |> renameRow => lst.unzip
    }

///////////////////////////////////////////////////////////////////////////
// STAGE 2 Generate the DFA
///////////////////////////////////////////////////////////////////////////

    // match: #(list(list(pattern)), list(tpmc)) -> tpmc
    fn match (#(M, S)) {
        if (lst.all(simple, M?0)) {
            variableRule(S)
        } else {
            patternRule(M, S)
        }
    }

    // variableRule: list(tpmc) -> tpmc
    fn variableRule(S) { S?0 }

    // patternRule: list(list(pattern)) -> list(tpmc) -> tpmc
    fn patternRule (M, S) {
    let
        // find the first index of a column in M that has a
        // constructor in its top position
        index = lst.indices(fn (x) { not simple(x) }, M ? 0) ? 0;
        // let N be that column in M
        N = M |> lst.nth(index);
        // let M-N be a matrix of all the columns in M except N
        M_N = M |> lst.except_nth(index);
        // for each constructor c in N
        arcs = lst.filter_not(simple, N) |> fn (c) {
        let
            // let {i_1 .. i_j} be the row-indices of the patterns
            // in N that match c
            i1_ij = rowsThatMatch(c, N);
            // let {pat_1 .. pat_j} be the patterns in the column
            // corresponding to those indices 
            pat1_patj = N ?? i1_ij;
            // let n be the arity of the constructor c
            n = arity(c);
            // For each pat_i, its n sub-patterns are extracted;
            // if pat_i is a wildcard, n wildcards are produced
            // instead, each tagged with the right path variable.
            // This results in a pattern matrix A with n columns
            // and j rows.
            A = pat1_patj |> unsafe fn {
                (tagged(_, ctor(_, pats))) |
                (tagged(_, tuple(pats))) { pats }
                (tagged(tag, _)) {
                    makeTags(tag, n)
                }
            };
            // This matrix A is then appended to the result of
            // selecting, from each column in the rest of the
            // original matrix, those rows whose indices are in
            // {i_1 .. i_j}.
            B = M_N ?? i1_ij;
            C = lst.zipWith(append, B, A);
            // Finally the indices are used to select the
            // corresponding final states X that go with these
            // rows.
            X = S ?? i1_ij;
        in
            // The arc for the constructor c is now defined as
            // (c’,state), where c’ is c with any immediate
            // sub-patterns replaced by their path variables
            // (thus c’ is a simple pattern), and state is the
            // result of recursively applying match to the new
            // matrix and the new sequence of final states.
            arc(simplify(c, n), [], match(#(C, X)))
        };
        // deduplicate
        uarcs = lst.unique(arcs);
    in 
        // Finally, the possibility for matching failure is considered.
        if (arcsAreExhaustive(uarcs)) {
            // If the set of constructors is exhaustive, then no more
            // arcs are computed.
            let var = varName(N?0);
            in test("L_" @@ var, var, [], 1, uarcs)
        } else {
            // Otherwise, a default arc (_,state) is the last arc.
            let var = varName(N?0);
            in test("LD_" @@ var,
                    var,
                    [],
                    1,
                    uarcs @@ [makeDefaultArc(N, M_N, S)])
        }
    }

    // varName: pattern -> string
    fn varName {
        (tagged(x, _)) { x }
        (err) { error("varName:" @@ $err) }
    }

    // makeErrorArc: list(pattern) => Arc
    fn makeErrorArc {
        (tagged(x, _) @ _) {
            arc(tagged(x, wildcard),
                [],
                final("error", [], 1, dict.E, symbol("error")))
        }
        (_) { error("makeErrorArc") }
    }

    // makeDefaultArc: list(pattern) -> list(list(pattern)) ->
    //                                        list(tpmc) -> Arc
    fn makeDefaultArc (N, M_N, S) {
        // If there are any wildcard patterns in the selected
        // column, then their rows are selected from the rest
        // of the matrix and the final states, and the state
        // is the result of applying match to the new matrix
        // and states. Otherwise, the error state is used
        // after its reference count has been incremented.
        switch (lst.indices(patternIsWildcard, N)) {
            ([]) { makeErrorArc(N) }
            (wildcards) {
                let M_Ns = M_N ?? wildcards;
                    Ss = S ?? wildcards;
                in
                    arc(tagged(varName(N?0), wildcard),
                        [], match(#(M_Ns, Ss)))
            }
        }
    }

    // patternIsWildcard: pattern -> bool
    fn patternIsWildcard {
        (tagged(_, wildcard)) { true }
        (_) { false }
    }

    // arcsAreExhaustive: list(Arc) -> bool
    fn arcsAreExhaustive {
        ([]) { false }
        (arcs = arc(tagged(_, ctor(c, _)), _, _) @ _) {
            ctorsAreExhaustive(arcs)
        }
        (arc(tagged(_, const(_)), _, _) @ _) { false }
        (arc(tagged(_, comparison(_)), _, _) @ _) { false }
        (_) { true }
    }

    // ctorsAreExhaustive: list(Arc) -> bool
    fn ctorsAreExhaustive {
        (arc(tagged(_, ctor("cons", _)), _, _) @ arcs) {
            lst.any(fn {
                (arc(tagged(_, ctor("nil", _)), _, _)) { true }
                (_) { false }
            },
            arcs)
        }
        (arc(tagged(_, ctor("nil", _)), _, _) @ arcs) {
            lst.any(fn {
                (arc(tagged(_, ctor("cons", _)), _, _)) { true }
                (_) { false }
            },
            arcs)
        }
        (_) { false }
    }

    // simplify: pattern -> number -> pattern
    fn simplify {
        (tagged(tag, ctor(name, _)), n) {
            tagged(tag, ctor(name, makeTags(tag, n)))
        }
        (tagged(tag, tuple(_)), n) {
            tagged(tag, tuple(makeTags(tag, n)))
        }
        (x, _) { x }
    }

    // makeTags: string -> number -> list(pattern)
    fn makeTags(tag, n) {
        0 .. n - 1 |> makeTag(tag) |> fn (t) { tagged(t, wildcard) }
    }

    // arity: pattern -> number
    fn arity {
        (tagged(_, ctor(_, l))) |
        (tagged(_, tuple(l))) { lst.length(l) }
        (tagged(_, const(_))) { 0 }
        (tagged(_, comparison(_))) { 0 }
        (x) { error("arity failed on " @@ $x) }
    }

    // rowsThatMatch: pattern -> list(pattern) -> list(pattern)
    fn rowsThatMatch(c, N) {
        let
            fn ctorMatches {
                (tagged(_, const(n)), tagged(_, const(n))) { true }
                (tagged(_, ctor(s, _)), tagged(_, ctor(s, _))) { true }
                (tagged(_, tuple(a)), tagged(_, tuple(b))) { lst.length(a) == lst.length(b) }
                (_, tagged(_, comparison(_))) { true }
                (_, tagged(_, wildcard)) { true }
                (_, _) { false }
            }
            fn helper {
                (_, []) { [] }
                (n, pat @ pats) {
                    if (ctorMatches(c, pat)) {
                        n @ helper(n + 1, pats)
                    } else {
                        helper(n + 1, pats)
                    }
                }
            }
        in helper(0, N)
    }

    // simple: pattern -> bool
    fn simple {
        (tagged(_, ctor(_, _))) { false }
        (tagged(_, tuple(_))) { false }
        (tagged(_, const(_))) { false }
        (tagged(_, comparison(_))) { false }
        (_) { true }
    }

///////////////////////////////////////////////////////////////////////////
// STAGE 3 Optimize the DFA
///////////////////////////////////////////////////////////////////////////

    // countStates: tpmc -> #(tpmc, refcounts)
    fn countStates (dfa) {
        let
            // collectStates: tpmc -> refcounts -> refcounts
            fn collectStates {
                (s = final(_, _, _, _, _), d) {
                    let label = makeLabel(s);
                    in switch (dict.lookup(label, d)) {
                            (some(rc)) { dict.insert(label, rc + 1, d) }
                            (nothing) { dict.insert(label, 1, d) }
                        }
                }
                (s = test(_, var, free, _, arcs), d) {
                    let fn collectArcs {
                        ([], d) { d }
                        (arc(_, _, s) @ arcs, d) {
                            collectArcs(arcs, d) => collectStates(s)
                        }
                    }
                    in collectArcs(arcs, d) => fn (d) {
                        let label = makeLabel(s);
                        in switch (dict.lookup(label, d)) {
                            (some(rc)) { dict.insert(label, rc + 1, d); }
                            (nothing) { dict.insert(label, 1, d); }
                        }
                    }
                }
            }
        in #(dfa, collectStates(dfa, dict.E))
    }

    // transferRefCountsToStates: #(tpmc, refcounts) -> tpmc
    fn transferRefCountsToStates (#(state, rcs)) {
        let
            fn getRc(s) {
                switch(dict.lookup(makeLabel(s), rcs)) {
                    (some(n)) { n }
                    (nothing) { 0 }
                };
            }
            fn h {
                (s = final(stamp, free, _, substs, code)) {
                    final(stamp, free, getRc(s), substs, code)
                }
                (s = test(stamp, var, free, _, st)) {
                    test(stamp, var, free, getRc(s), st |> i)
                }
            }
            fn i (arc(pat, free, state)) {
                arc(pat, free, h(state))
            }
        in h(state)
    }

///////////////////////////////////////////////////////////////////////////
// STAGE 4 Generate Intermediate Code
///////////////////////////////////////////////////////////////////////////

    // step 4.1 calculate free variables
    // calculateFreeVariables: tpmc -> tpmc
    fn calculateFreeVariables (dfa) {
        let
            // calculateFree: dfa -> dfa
            fn calculateFree {
                (final(stamp, _, rc, substs, code)) {
                    final(stamp, dict.values(substs), rc, substs, code)
                }
                (test(stamp, var, _, rc, arcs)) {
                    let freeArcs = arcs |> calculateFreeArc;
                        freeVars = (var @
                            ((freeArcs |> fn (arc(_, f, _)) { f }) =>
                                lst.concat)) => lst.unique;
                    in test(stamp, var, freeVars, rc, freeArcs)
                }
            }
            // calculateFreeArc: Arc -> Arc
            fn calculateFreeArc (arc(pat, _, s)) {
                let s2 = calculateFree(s);
                    fn arcFree (pat, s3) {
                        let
                            // varsInPat: pattern -> list(string)
                            fn varsInPat {
                                (tagged(x, ctor(_, args))) {
                                    x @ ((args |> varsInPat) =>
                                            lst.concat)
                                }
                                (tagged(x, tuple(args))) {
                                    x @ ((args |> varsInPat) =>
                                            lst.concat)
                                }
                                (tagged(x, _)) { [x] }
                                (x) { error($x) }
                            }
                            // freeVarsInState: tpmc -> list(string)
                            fn freeVarsInState {
                                (final(_, f, _, _, _)) |
                                (test(_, _, f, _, _)) { f }
                            }
                        in lst.exclude(varsInPat(pat),
                                       freeVarsInState(s3))
                    }
                in arc(pat, arcFree(pat, s2), s2)
            }
        in calculateFree(dfa)
    }

    // Stage 4.2 Translate the DFA to intermediate code
    // translate: tpmc -> code
    fn translate (original, tpmc) {
        let
            fn collectArcs {
                ([], d) { d }
                (arc(_, _, s) @ arcs, d) {
                    collectArcs(arcs, d) => collectLambdas(s)
                }
            }
            fn collectLambdas {
                (s = final(_, free, rc, _, _), d) {
                    if (rc > 1) {
                        dict.insert(makeLabel(s), s, d)
                    } else {
                        d
                    }
                }
                (s = test(_, _, _, rc, arcs), d) {
                    collectArcs(arcs, d) => fn (d) {
                        if (rc > 1) {
                            dict.insert(makeLabel(s), s, d)
                        } else {
                            d
                        }
                    }
                }
            }
            fn translateState {
                (final(stamp, free, rc, _, code)) {
                    if (rc > 1) {
                        apply(symbol(stamp), free |> fn (s) { symbol(s) })
                    } else {
                        code
                    }
                }
                (test(stamp, var, free, rc, arcs)) {
                    if (rc > 1) {
                        apply(symbol(stamp), free |> fn (s) { symbol(s) })
                    } else {
                        case(symbol(var), arcs |> translateArc)
                    }
                }
            }
            fn translateArc(arc(pat, _, state)) {
                when(pat, translateState(state))
            }
            fn translateLambdas(lambdas) {
                dict.values(lambdas) |> fn {
                    (final(stamp, free, _, _, code)) {
                        #(symbol(stamp),
                          lambda(free |> fn (s) { symbol(s) }, code))
                    }
                    (test(stamp, var, free, _, arcs)) {
                        #(symbol(stamp), lambda(free |> fn (s) {
                            symbol(s)
                        }, case(symbol(var), arcs |> translateArc)))
                    }
                }
            }
            fn wrapLetRec(body, lambdas) {
                letrec(translateLambdas(lambdas), body)
            }
            fn wrapLambda(code) {
                let fn h {
                    ([], _) { [] }
                    (_ @ args, n) {
                        symbol("x$" @@ $n) @ h(args, n + 1)
                    }
                }
                unsafe fn getargs(#(args, _) @ _) { args }
                in lambda(h(getargs(original), 0), code)
            }
        in collectLambdas(tpmc, dict.E) =>
            wrapLetRec(translateState(tpmc)) =>
            wrapLambda
    }

///////////////////////////////////////////////////////////////////////////
// Input
///////////////////////////////////////////////////////////////////////////

    input = [
        #(
            [
                variable("base"),
                const(1),
                named("c", tuple([variable("d"), const(3)])),
                ctor("cons", [variable("pat"), variable("pats")])
            ],
            apply(symbol("c"), [symbol("pat"), symbol("pats")])
        ),
        #(
            [
                wildcard,
                variable("d"),
                tuple([variable("d"), wildcard]),
                ctor("nil", [])
            ],
            symbol("d")
        )
    ];

///////////////////////////////////////////////////////////////////////////
// Test
///////////////////////////////////////////////////////////////////////////

in
    print input => rename => match => countStates =>
          transferRefCountsToStates => calculateFreeVariables =>
          translate(input)

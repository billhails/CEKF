let
    typedef term { num(int) |
                   var(char) |
                   add(term, term) |
                   sub(term, term) |
                   mul(term, term) |
                   div(term, term) |
                   pow(term, term) }

    fn deriv(t, x) {
        if (t == x) {
            num(1)
        } else {
            switch(t) {
                (num(_)) { num(0) }
                (pow(x1, num(n))) {
                    if (x1 == x) {
                        mul(num(n), pow(x1, num(n - 1)))
                    } else {
                        let t = simplify(x1);
                        in
                        if (t == x1) {
                            pow(t, num(n))
                        } else {
                            deriv(pow(t, num(n)), x)
                        }
                    }
                }
                (add(f, g)) { add(deriv(f, x), deriv(g, x)) }
                (sub(f, g)) { sub(deriv(f, x), deriv(g, x)) }
                (mul(f, g)) { add(mul(g, deriv(f, x)), mul(f, deriv(g, x))) }
                (div(num(1), f)) { div(sub(num(0), deriv(f, x)), mul(f, f)) }
                (div(f, g)) { div(sub(mul(g, deriv(f, x)), mul(f, deriv(g, x))), mul(g, g)) }
            }
        }
    }

    fn simplify {
        (x=num(_))            { x }
        (x=var(_))            { x }
        (add(a, num(0)))      |
        (add(num(0), a))      { simplify(a) }
        (add(num(a), num(b))) { num(a + b) }
        (add(num(a), add(num(b), x))) |
        (add(num(a), add(x, num(b)))) |
        (add(add(x, num(b)), num(a))) |
        (add(add(num(b), x), num(a))) { simplify(add(num(a + b), x)) }
        (add(a, num(n)))      |
        (add(num(n), a))      { add(num(n), simplify(a)) }
        (add(a, b))           { add(simplify(a), simplify(b)) }
        (sub(a, num(0)))      { simplify(a) }
        (sub(a, num(n)))      { sub(simplify(a), num(n)) }
        (sub(a, b))           { sub(simplify(a), simplify(b)) }
        (mul(num(0), _))      |
        (mul(_, num(0)))      { num(0) }
        (mul(num(1), a))      |
        (mul(a, num(1)))      { simplify(a) }
        (mul(num(a), num(b))) { num(a * b) }
        (mul(a, num(n)))      |
        (mul(num(n), a))      { mul(num(n), simplify(a)) }
        (mul(a, b))           { mul(simplify(a), simplify(b)) }
        (div(a, num(1)))      { simplify(a) }
        (div(num(0), a))      { num(0) }
        (div(a, b))           { div(simplify(a), simplify(b)) }
        (pow(a, num(1)))      { simplify(a) }
        (pow(a, num(0)))      { num(1) }
        (pow(num(a), num(b))) { num(a**b) }
        // (a + b)**2 == a**2 + 2ab + b**2
        (pow(add(a, b), num(2))) { simplify(add(pow(a, num(2)), add(mul(num(2), mul(a, b)), pow(b, num(2))))) }
        (pow(a, b)) { pow(simplify(a), simplify(b)) }
    }
in
    print(simplify(simplify(deriv(add(add(pow(add(var('x'), num(1)), num(2)), var('x')), num(1)), var('x')))))

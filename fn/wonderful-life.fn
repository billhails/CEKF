let
    typedef tree { leaf | node(tree, tree) }

    // start with a root node, toss a coin and if it comes up
    // heads, create two children and repeat the process on each
    fn generateTree (seed) {
        let
            fn helper (seed, depth) {
                let
                    s0 = rand(seed);
                in
                    if (depth > 50 or s0 < 0.5) {
                        #(s0, leaf)
                    } else {
                        unsafe fn (#(s1, t1)) {
                            unsafe fn (#(s2, t2)) {
                                #(s2, node(t1, t2))
                            } (helper(s1, depth + 1))
                        } (helper(s0, depth + 1))
                    }
            }
        in
            helper(seed, 0)
    }

    unsafe fn printTree(#(_, t)) {
        let
            fn inner {
                (id, leaf) {
                    puts("    a");
                    putn(id);
                    puts("[label=\"\"]\n");
                    id;
                }
                (id, node(l, r)) {
                    let id1 = inner(id + 1, l);
                        id2 = inner(id1 + 1, r);
                    in
                        puts("    a");
                        putn(id);
                        puts("[label=\"\"]\n");
                        puts("    a");
                        putn(id);
                        puts(" -> a");
                        putn(id + 1);
                        puts("\n");
                        puts("    a");
                        putn(id);
                        puts(" -> a");
                        putn(id1 + 1);
                        puts("\n");
                        id2;
                }
            }
        in
            puts("digraph {\n");
            inner(1, t);
            puts("}\n");
    }
in
    printTree(generateTree(0.64046))

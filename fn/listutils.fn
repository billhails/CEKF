fn member {
    (_, []) { false }
    (x, x @ _) { true }
    (x, _ @ t) { member(x, t) }
}

fn map {
    (_, []) { [] }
    (func, h @ t) { func(h) @ map(func, t)) }
}

fn length {
    ([]) { 0 }
    (_ @ t) { 1 + length(t) }
}

fn foldl {
    (_, [], acc) { acc }
    (func, h @ t, acc) { foldl(func, t, func(h, acc)) }
}

fn foldr(func, lst, acc) {
    foldl(func, reverse(lst), acc)
}

fn reverse (lst) {
    foldl(fn (elem, acc) { elem @ acc }, lst, [])
}

fn filter {
    (_, []) { [] }
    (func, h @ t) {
        if (func(h)) {
            h @ filter(func, t)
        } else {
            filter(func, t)
        }
    }
}

fn fill {
    (0, _) { [] }
    (n, v) { v @ fill(n - 1, v) }
}

fn nth {
    (0, h @ _) { h }
    (n, _ @ t) { nth(n - 1, t) }
}

fn sum(lst) {
    foldl(fn (elm, acc) { elm + acc }, lst, 0)
}

fn range(low, high) {
    if (low >= high) { [] }
    else { low @ range(low + 1, high) }
}

fn dedup {
    ([]) { [] }
    (h @ t) {
        h @ dedup(filter(t, fn(i) { h != i }))
    }
}

fn sort(lst) {
    let
        fn full_sort {
            ([]) { [] }
            (first @ rest) {
                partition(first, rest, fn (lesser, greater) {
                    partial_sort(lesser, first @ full_sort(greater))
                })
            }
        }
        fn partial_sort {
            (first @ rest, already_sorted) {
                partition(first, rest, fn (lesser, greater) {
                    partial_sort(lesser, first @ partial_sort(greater, already_sorted))
                })
            }
            ([], sorted) { sorted }
        }
        fn partition(key, lst, kont) {
            let fn helper {
                ([], lesser, greater) { kont(lesser, greater) }
                (first @ rest, lesser, greater) {
                    if (key < first) {
                        helper(rest, lesser, first @ greater)
                    } else {
                        helper(rest, first @ lesser, greater)
                    }
                }
            }
            in helper(lst, [], [])
        }
    in
        full_sort(lst)
}

let
    fn member {
        (_, []) { false }
        (x, x @ _) { true }
        (x, _ @ t) { member(x, t) }
    }

    fn map {
        (_, []) { [] }
        (func, h @ t) { func(h) @ map(func, t) }
    }

    fn length {
        ([]) { 0 }
        (_ @ t) { 1 + length(t) }
    }

    fn foldl {
        (_, acc, []) { acc }
        (func, acc, h @ t) { foldl(func, func(h, acc), t) }
    }

    fn foldr(func, acc, lst) {
        foldl(func, acc, reverse(lst))
    }

    fn foldl1(func, h @ t) {
        foldl(func, h, t)
    }

    fn foldr1(func, lst) {
        foldl1(func, reverse(lst))
    }

    // reverse = foldl((@), [])
    fn reverse (lst) {
        foldl(fn (elem, acc) { elem @ acc }, [], lst)
    }

    fn scanl (func, acc, lst) {
        let fn scan {
            (accl, []) { accl }
            (acc = acch @ acct, lsth @ lstt) { scan(func(lsth, acch) @ acc, lstt) }
        }
        in scan([acc], lst)
    }

    fn filter {
        (_, []) { [] }
        (func, h @ t) {
            if (func(h)) {
                h @ filter(func, t)
            } else {
                filter(func, t)
            }
        }
    }

    // BUG concat list of strings prints as a list of char rather than a string
    fn concat(lst) {
        foldr(fn (elem, acc) { elem @@ acc }, [], lst)
    }

    fn any {
        (_, []) { false }
        (f, h @ t) { f(h) or any(f, t) }
    }

    fn none(f, l) {
        not any(f, l)
    }

    fn all {
        (_, []) { true }
        (f, h @ t) { f(h) and all(f, t) }
    }

    fn repeat {
        (0, _) { [] }
        (n, v) { v @ repeat(n - 1, v) }
    }

    fn nth {
        (0, h @ _) { h }
        (n, _ @ t) { nth(n - 1, t) }
    }

    // sum = foldl((+), 0)
    fn sum(lst) {
        foldl(fn (elm, acc) { elm + acc }, 0, lst)
    }

    // product = foldl((*), 1)
    fn product(lst) {
        foldl(fn (elm, acc) { elm * acc }, 1, lst)
    }

    fn zip {
        (h1 @ t1, h2 @ t2) { [h1, h2] @ zip(t1, t2) }
        (_, _) { [] }
    }

    fn zipWith {
        (f, h1 @ t1, h2 @ t2) { f(h1, h2) @ zipWith(f, t1, t2) }
        (_, _, _) { [] }
    }

    // BUG replacing (a @ []) with ([a]) causes error
    fn last {
        (a @ []) { a }
        (_ @ t) { last(t) }
    }

    fn empty {
        ([]) { true }
        (_) { false }
    }

    fn take {
        (0, _) { [] }
        (n, []) { [] }
        (n, h @ t) { h @ take(n - 1, t) }
    }

    fn drop {
        (0, l) { l }
        (n, []) { [] }
        (n, _ @ t) { drop(n - 1, t) }
    }

    fn minimum(lst) {
        foldl1(fn (elem, acc) { if (elem < acc) { elem } else { acc } }, lst)
    }

    fn maximum(lst) {
        foldl1(fn (elem, acc) { if (elem > acc) { elem } else { acc } }, lst)
    }

    fn range(low, high) {
        if (low >= high) { [] }
        else { low @ range(low + 1, high) }
    }

    fn dedup {
        ([]) { [] }
        (h @ t) {
            h @ dedup(filter(fn(i) { h != i }, t))
        }
    }

    fn sort(lst) {
        let
            fn full_sort {
                ([]) { [] }
                (first @ rest) {
                    partition(first, rest, fn (lesser, greater) {
                        partial_sort(lesser, first @ full_sort(greater))
                    })
                }
            }
            fn partial_sort {
                (first @ rest, already_sorted) {
                    partition(first, rest, fn (lesser, greater) {
                        partial_sort(lesser, first @ partial_sort(greater, already_sorted))
                    })
                }
                ([], sorted) { sorted }
            }
            fn partition(key, lst, kont) {
                let fn helper {
                    ([], lesser, greater) { kont(lesser, greater) }
                    (first @ rest, lesser, greater) {
                        if (key < first) {
                            helper(rest, lesser, first @ greater)
                        } else {
                            helper(rest, first @ lesser, greater)
                        }
                    }
                }
                in helper(lst, [], [])
            }
        in
            full_sort(lst)
    }

in
    print(concat(["well", " ", "hi", " ", "there"]));
    puts("\n")

let
    typedef tree(#t) {
        leaf |
        red(tree(#t), #t, tree(#t)) |
        black(tree(#t), #t, tree(#t))
    }

    fn member {
        (_, leaf) { false }
        (x, red(_, x, _)) { true }
        (x, black(_, x, _)) { true }
        (x, red(l, y, r)) {
            if (x < y) { member(x, l) } else { member(x, r) }
        }
        (x, black(l, y, r)) {
            if (x < y) { member(x, l) } else { member(x, r) }
        }
    }

    fn insert(x, s) {
        let
            fn bal(a, x, b, y, c, z, d) { red(black(a, x, b), y, black(c, z, d)) }

            fn balance {
                (red(red(a, x, b), y, c), z, d) { bal(a, x, b, y, c, z, d) }
                (red(a, x, red(b, y, c)), z, d) { bal(a, x, b, y, c, z, d) }
                (a, x, red(red(b, y, c), z, d)) { bal(a, x, b, y, c, z, d) }
                (a, x, red(b, y, red(c, z, d))) { bal(a, x, b, y, c, z, d) }
                (a, x, b) { black(a, x, b) }
            }

            fn ins {
                (_, leaf, _) { red(leaf, x, leaf) }
                (x, red(a, x, b), throw) { throw(s) }
                (x, black(a, x, b), throw) { throw(s) }
                (x, red(a, y, b), throw) {
                    if (x < y) {
                        red(ins(x, a, throw), y, b)
                    } else {
                        red(a, y, ins(x, b, throw))
                    }
                }
                (x, black(a, y, b), throw) {
                    if (x < y) {
                        balance(ins(x, a, throw), y, b)
                    } else {
                        balance(a, y, ins(x, b, throw))
                    }
                }
            }
        in
            here fn (throw) { ins(x, s, throw) }
    }
 
    fn makeSet(lst) {
       let fn helper {
           ([], tr) { tr }
           (h @ t, tr) { helper(t, insert(h, tr)) }
       }
       in
           helper(lst, leaf)
    }

in
    makeSet("kgimtseettepmupybbbmplgntqzutrfxqarkivirlbjqjigntslfewhnjouuyiepnswymkfpyovclntwbmhngufnoeidjfmhxxaqmqiaoodslwlwwnzxtdxawnfxbiesjtdwmrzkbdozzyppmdyzhvyhfadldkflwiwvmfutfeckzsqulxlenvpwpbqdjwxpphhtyeuojmvmhgwcisxevzlvbtnobaaokqbutzqumbzlgqwqsludnrygnynsqcvjekjouyyplgyzlhlsbakaknjauctsspolsvifpwrklfxjfbxrnkecgmypfkbxonkusuzigleakcrnqhktvjonlfiuoeoupuwdtzyytsmggyspdoswafjvceqyzgtksocdhszgybbrrivirlcgozvxgtvtxgyuukntggimfsoprufwmdngqkabxolitehdjbiqhdjexiaojatkhdjdcpckbxdxwfocqjchijeylcyhoxnywikniqzpqeeqtucengrvgbbntwmvyeoddjxlgqablttpyrmxlckrvstwmvmfcvmbskcivvsjlchmoczdnbczvznnkiaabonyiqvjmbiyeddetcczprvjfmhmshxmknhonxyxgbgpawkahqbknbqpargbnnunwgxphhlvedlyazkfzavezdtlfefpvjiooocpwspyalpahadximvaauocirfgpijbhqskcuuynvcvtndifklhczerlvjpfpjhnkxxprrsktdfnrrmoypigecxbkzxflgtmdxxzfvdvesewzqotfdlqfibzkchndafnmxirrruol")

// #[black
//     #[black
//         #[red
//             #[black
//                 #[black
//                     #[red #[leaf] 'a' #[leaf]]
//                     'b'
//                     #[leaf]]
//                 'c'
//                 #[black #[leaf] 'd' #[leaf]]]
//             'e'
//             #[black
//                 #[black
//                     #[red #[leaf] 'f' #[leaf]]
//                     'g'
//                     #[red #[leaf] 'h' #[leaf]]]
//                 'i'
//                 #[black
//                     #[red #[leaf] 'j' #[leaf]]
//                     'k'
//                     #[red #[leaf] 'l' #[leaf]]]]]
//         'm'
//         #[black
//             #[black
//                 #[leaf] 'n' #[leaf]]
//                 'o'
//                 #[black #[leaf] 'p' #[leaf]]]]
//     'q'
//     #[black
//         #[black
//             #[black #[leaf] 'r' #[leaf]]
//             's'
//             #[black #[leaf] 't' #[leaf]]]
//         'u'
//         #[black
//             #[black
//                 #[leaf]
//                 'v'
//                 #[red #[leaf] 'w' #[leaf]]]
//             'x'
//             #[black
//                 #[leaf]
//                 'y'
//                 #[red #[leaf] 'z' #[leaf]]]]]]

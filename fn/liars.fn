let
    fn require(condition) {
        condition or back
    }

    fn one_of {
        ([]) { back }
        (h @ t) {
            h then one_of(t)
        }
    }

    fn member {
        (_, []) { false }
        (x,  x @ _) { true }
        (x, _ @ t) { member(x, t) }
    }

    fn exclude {
        (items, []) { [] }
        (items, h @ t) {
            if (member(h, items)) {
                exclude(items, t)
            } else {
                h @ exclude(items, t)
            }
        }
    }

    fn sortBy(predicate, lst) {
        let
            fn full_sort {
                ([]) { [] }
                (first @ rest) {
                    partition(first, rest, fn (lesser, greater) {
                        partial_sort(lesser, first @ full_sort(greater))
                    })
                }
            }
            fn partial_sort {
                (first @ rest, already_sorted) {
                    partition(first, rest, fn (lesser, greater) {
                        partial_sort(lesser, first @ partial_sort(greater, already_sorted))
                    })
                }
                ([], sorted) { sorted }
            }
            fn partition(key, lst, kont) {
                let fn helper {
                    ([], lesser, greater) { kont(lesser, greater) }
                    (first @ rest, lesser, greater) {
                        if (predicate(key, first) == lt) {
                            helper(rest, lesser, first @ greater)
                        } else {
                            helper(rest, first @ lesser, greater)
                        }
                    }
                }
                in helper(lst, [], [])
            }
        in
            full_sort(lst)
    }

    fn liars() {
        let
            ranks = [1, 2, 3, 4, 5];
            betty = one_of(ranks);
            ethel = one_of(exclude([betty], ranks));
            joan = one_of(exclude([betty, ethel], ranks));
            kitty = one_of(exclude([betty, ethel, joan], ranks));
            mary = one_of(exclude([betty, ethel, joan, kitty], ranks));
        in
            require((kitty == 2) xor (betty == 3));
            require((ethel == 1) xor (joan == 2));
            require((joan == 3) xor (ethel == 5));
            require((kitty == 2) xor (mary == 4));
            require((mary == 4) xor (betty == 1));
            sortBy(
                fn (#(_, a), #(_, b)) { a <=> b },
                [
                    #("Betty", betty),
                    #("Ethel", ethel),
                    #("Joan", joan),
                    #("Kitty", kitty),
                    #("Mary", mary)
                ]
            )
    }
in
    print(liars())

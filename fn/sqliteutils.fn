namespace

link "dictionary.fn" as dict;

fn with_database(name, handler) {
    switch (sqlite3_open(name)) {
        (success(sqlite)) {
            let data = handler(sqlite);
            in sqlite3_close(sqlite);
            data
        }
        (failure(errmsg)) {
            puts("database error: ");
            puts(errmsg);
            putc('\n');
            nothing
        }
    }
}

fn with_statement(query, handler, sqlite) {
    switch (sqlite3_prepare(sqlite, query)) {
        (success(statement)) {
            let data = handler(statement);
            in sqlite3_finalize(statement);
            data
        }
        (failure(errCode)) {
            puts("statement error: ");
            putn(errCode);
            putc('\n');
            nothing
        }
    }
}

fn with_bindings(bindings, handler, statement) {
    switch (sqlite3_bind(statement, bindings)) {
        (0) {
            handler(statement);
        }
        (n) {
            puts("bind error: ");
            putn(n);
            putc('\n');
            nothing
        }
    }
}

fn with_results(handler, statement) {
    let
        fn _with_results(keys) {
            switch(sqlite3_fetch(statement)) {
                (some(row)) {
                    handler(dict.make(keys, row));
                    _with_results(keys)
                }
                (nothing) { nothing }
            }
        }
        keys = sqlite3_names(statement);
    in
        _with_results(keys);
}

fn print_row(row) {
    dict.foreach(fn (k, v) {
        puts(", ");
        puts(k);
        puts(":");
        unsafe switch (v) {
            (basic_null) { [] }
            (basic_number(n)) { putn(n); [] }
            (basic_string(s)) { puts(s); }
        }
    }, row);
}

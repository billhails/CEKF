let
    fn member {
        (item, [])       { false }
        (item, item @ t) { true }
        (item, _ @ tail) { member(item, tail) }
    }

    fn exclude {
        (items, []) { [] }
        (items, h @ t) {
            if (member(h, items)) {
                exclude(items, t)
            } else {
                h @ exclude(items, t)
            }
        }
    }
in
    exclude
